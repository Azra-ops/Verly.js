{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/Utils.js","webpack:///./src/Mouse.js","webpack:///./src/Verly.js","webpack:///./src/Vector.js","webpack:///./src/app.js","webpack:///./src/Point.js","webpack:///./src/Stick.js","webpack:///./src/Entity.js","webpack:///./src/TypoGraphy.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","window","normalizedRandom","Math","random","degreesToRad","degrees","PI","clamp","e","min","max","rand","arguments","length","lerp","a","b","Mouse","[object Object]","entities","canvas","this","draggedPoint","down","coord","Vector","offset","offsetCoord","addEventListener","setXY","offsetX","pos","x","offsetY","y","sub","resetVelocity","touches","clientX","clientY","pageX","pageY","getNearestPoint","renderDraggedPoint","dragPoint","point","ctx","beginPath","strokeStyle","arc","radius","stroke","closePath","k","points","dist","src_Verly","iterations","currentFrame","WIDTH","width","HEIGHT","height","mouse","args","mixEntity","Entity","sticks","push","index","indexOf","splice","concat","apply","addEntity","renderPointsIndex","drag","update","render","w","h","box","addPoint","addStick","segments","stride1","stride2","hexagon","stride","theta","cos","sin","center","Stick","posx","posy","pinOffset","cloth","xStride","yStride","px","py","tear","threshold","startPoint","endPoint","removeSticks","pin","dontPush","gap","rope","undefined","x0","y0","ragdoll","head","Point","setMass","f1","f2","h1","h2","Vector_Vector","v1","v2","distSq","add","fromAngle","angle","v","random2D","jitter","mult","div","setAngle","len","mag","sqrt","magSq","setMag","normalize","normalizeTo","limit","heading","atan2","dx","dy","copy","negative","array","toString","z","project","coeff","rotate","Verly","vx","vy","oldpos","bounce","friction","groundFriction","gravity","pinned","color","mass","forceAcc","g","f","strength","delta","magR","applyForce","time","speed","vel","fillStyle","fill","p1","p2","stiffness","stepCoef","diff","offsetx","offsety","m1","m2","moveTo","lineTo","setGravity","map","constrain","fillText","updatePoints","j","updateSticks","updateContrains","renderPoints","renderSticks","TypoGraphy","size","letter","stickDistance","A","B","C","D","E","S","I","K","U","N","R","G","L","Y","V","X","P","H","O","letters","gridArray","text","setRadius","__webpack_exports__"],"mappings":"aACA,IAAAA,EAAA,GAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,GAAA,CACAG,EAAAH,EACAI,GAAA,EACAH,QAAA,IAUA,OANAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,IAAAD,QAAAF,GAGAG,EAAAE,GAAA,EAGAF,EAAAD,QAKAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACAZ,EAAAa,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,EAAA,CAA0CK,YAAA,EAAAC,IAAAL,KAK1CZ,EAAAkB,EAAA,SAAAhB,GACA,oBAAAiB,eAAAC,aACAN,OAAAC,eAAAb,EAAAiB,OAAAC,YAAA,CAAwDC,MAAA,WAExDP,OAAAC,eAAAb,EAAA,cAAiDmB,OAAA,KAQjDrB,EAAAsB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAArB,EAAAqB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFA1B,EAAAkB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAArB,EAAAU,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAzB,EAAA6B,EAAA,SAAA1B,GACA,IAAAS,EAAAT,KAAAqB,WACA,WAA2B,OAAArB,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAH,EAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD/B,EAAAkC,EAAA,GAIAlC,IAAAmC,EAAA,mBClFAC,OAAAC,iBAAA,WACA,SAAAC,KAAAC,SAAA,GAEAH,OAAAI,aAAA,SAAAC,GAEA,OAAAA,GADAH,KAAAI,GACA,MAEAN,OAAAO,MAAA,SAAArB,EAAAsB,EAAAxC,GACA,OAAAkC,KAAAO,IAAAP,KAAAQ,IAAAxB,EAAAgB,KAAAO,IAAAD,EAAAxC,IAAAkC,KAAAQ,IAAAF,EAAAxC,KAEAgC,OAAAG,OAAA,SAAAQ,EAAAF,EAAAC,GAEA,WAAAE,UAAAC,OACAX,KAAAC,SAAAS,UAAA,IACG,GAAAA,UAAAC,SAEHH,EAAAD,EACAA,EAAAE,EACAA,EAAAT,KAAAC,QAEAM,GAAAC,EAEGA,EAKHC,KAAAD,EAAAD,MAHAC,EAAAD,EACAE,IAAAD,GAJAR,KAAAC,WASAH,OAAAc,KAAA,SAAAC,EAAAC,EAAAlB,GACA,OAAAkB,EAAAD,GAAAjB,EAAAiB,wCC/Be,MAAAE,EACfC,YAAAC,EAAAC,GACAC,KAAAF,WAEAE,KAAAC,aAAA,KACAD,KAAAE,MAAA,EACAF,KAAAG,MAAA,IAAAC,OACAJ,KAAAK,OAAA,IAAAD,OACAJ,KAAAM,YAAA,IAAAF,OACAJ,KAAAD,SAEAC,KAAAD,OAAAQ,iBAAA,YAAApB,IACAa,KAAAE,MAAA,EACAF,KAAAC,eACAD,KAAAK,OAAAG,MAAArB,EAAAsB,QAAAT,KAAAC,aAAAS,IAAAC,EAAAxB,EAAAyB,QAAAZ,KAAAC,aAAAS,IAAAG,GACAb,KAAAM,YAAAF,OAAAU,IAAAd,KAAAG,MAAAH,KAAAK,WAGAL,KAAAD,OAAAQ,iBAAA,UAAApB,IACAa,KAAAC,cACAD,KAAAC,aAAAc,gBAEAf,KAAAE,MAAA,EACAF,KAAAC,aAAA,OAGAD,KAAAD,OAAAQ,iBAAA,YAAApB,IACAa,KAAAG,MAAAK,MAAArB,EAAAsB,QAAAtB,EAAAyB,SACAZ,KAAAM,YAAAF,OAAAU,IAAAd,KAAAG,MAAAH,KAAAK,UAIAL,KAAAD,OAAAQ,iBAAA,aAAApB,IACA,IAAAkB,EAAAlB,EAAA6B,QAAA,GACAhB,KAAAE,MAAA,EACAF,KAAAC,eACAD,KAAAK,OAAAG,MAAAH,EAAAY,QAAAjB,KAAAC,aAAAS,IAAAC,EAAAN,EAAAa,QAAAlB,KAAAC,aAAAS,IAAAG,GACAb,KAAAM,YAAAF,OAAAU,IAAAd,KAAAG,MAAAH,KAAAK,WAGAL,KAAAD,OAAAQ,iBAAA,WAAApB,IACAa,KAAAC,cACAD,KAAAC,aAAAc,gBAEAf,KAAAE,MAAA,EACAF,KAAAC,aAAA,OAEAD,KAAAD,OAAAQ,iBAAA,YAAApB,IACA,IAAAkB,EAAAlB,EAAA6B,QAAA,GACAhB,KAAAG,MAAAK,MAAAH,EAAAc,MAAAd,EAAAe,OACApB,KAAAM,YAAAF,OAAAU,IAAAd,KAAAG,MAAAH,KAAAK,UAIAR,YACAG,KAAAE,MACAF,KAAAC,aAAAS,IAAAF,MAAAR,KAAAM,YAAAK,EAAAX,KAAAM,YAAAO,GAGAhB,OACAG,KAAAE,OACAF,KAAAC,aAAAD,KAAAqB,mBAEArB,KAAAC,eACAD,KAAAsB,mBAAAtB,KAAAC,cACAD,KAAAuB,aAIA1B,mBAAA2B,GACAC,IAAAC,YACAD,IAAAE,YAAA,QACAF,IAAAG,IAAAJ,EAAAd,IAAAC,EAAAa,EAAAd,IAAAG,EAAA,IAAAW,EAAAK,OAAA,IAAAhD,KAAAI,IACAwC,IAAAK,SACAL,IAAAM,YAIAlC,kBAEA,IACApB,EAAA,KACA,QAAAuD,EAAA,EAAmBA,EAAAhC,KAAAF,SAAAN,OAA0BwC,IAC7C,QAAArF,EAAA,EAAqBA,EAAAqD,KAAAF,SAAAkC,GAAAC,OAAAzC,OAAoC7C,IAAA,CACzDqD,KAAAF,SAAAkC,GAAAC,OAAAtF,GAAA+D,IAAAwB,KAAAlC,KAAAG,OAJA,KAMA1B,EAAAuB,KAAAF,SAAAkC,GAAAC,OAAAtF,IAIA,OAAA8B,GC0Qe,IAAA0D,EA7Vf,MACAtC,YAAAuC,EAAArC,EAAA0B,GACAzB,KAAAF,SAAA,GACAE,KAAAoC,aACApC,KAAAqC,aAAA,EACArC,KAAAD,SACApB,OAAA2D,MAAAvC,EAAAwC,MACA5D,OAAA6D,OAAAzC,EAAA0C,OACA9D,OAAA8C,MACAzB,KAAA0C,MAAA,IAAqB9C,EAAKI,KAAAF,SAAAE,KAAAD,QAO1BF,gBAAA8C,GACA,IAAAC,EAAA,IAAAC,OAAA7C,KAAAoC,YAEAH,EAAA,GACAa,EAAA,GAGA,QAAAnG,EAAA,EAAmBA,EAAAgG,EAAAnD,OAAiB7C,IAAA,CACpCsF,EAAAc,KAAAJ,EAAAhG,GAAAsF,QACAa,EAAAC,KAAAJ,EAAAhG,GAAAmG,QAGA,IAAAE,EAAAhD,KAAAF,SAAAmD,QAAAN,EAAAhG,IACAqD,KAAAF,SAAAoD,OAAAF,EAAA,GAaA,OATAf,EAAA,GAAAkB,OAAAC,MAAA,GAAAnB,GACAa,EAAA,GAAAK,OAAAC,MAAA,GAAAN,GAGAF,EAAAX,SACAW,EAAAE,SAGA9C,KAAAqD,UAAAT,GACAA,EAGA/C,UAAAV,GACAa,KAAAF,SAAAiD,KAAA5D,GAGAU,mBACA,QAAAlD,EAAA,EAAmBA,EAAAqD,KAAAF,SAAAN,OAA0B7C,IAC7CqD,KAAAF,SAAAnD,GAAA2G,oBASAzD,WACAG,KAAA0C,MAAAa,OAOA1D,SACA,QAAAlD,EAAA,EAAmBA,EAAAqD,KAAAF,SAAAN,OAA0B7C,IAC7CqD,KAAAF,SAAAnD,GAAA6G,SAGAxD,KAAAqC,eAOAxC,SACA,QAAAlD,EAAA,EAAmBA,EAAAqD,KAAAF,SAAAN,OAA0B7C,IAC7CqD,KAAAF,SAAAnD,GAAA8G,SAcA5D,UAAAc,EAAAE,EAAA6C,EAAAC,GACA,MAAAC,EAAA,IAAAf,OAAA7C,KAAAoC,YAYA,OAXAwB,EAAAC,SAAAlD,EAAAE,EAAA,KACA+C,EAAAC,SAAAlD,EAAA+C,EAAA7C,EAAA,KACA+C,EAAAC,SAAAlD,EAAA+C,EAAA7C,EAAA8C,EAAA,KACAC,EAAAC,SAAAlD,EAAAE,EAAA8C,EAAA,KACAC,EAAAE,SAAA,KACAF,EAAAE,SAAA,KACAF,EAAAE,SAAA,KACAF,EAAAE,SAAA,KACAF,EAAAE,SAAA,KAEA9D,KAAAqD,UAAAO,GACAA,EAaA/D,cAAAc,EAAAE,EAAAkD,EAAAlC,EAAA,GAAAmC,EAAA,EAAAC,EAAA,GACA,MAAAC,EAAA,IAAArB,OAAA7C,KAAAoC,YAEA,IAAA+B,EAAA,EAAAtF,KAAAI,GAAA8E,EAGA,QAAApH,EAAA,EAAmBA,EAAAoH,IAAcpH,EAAA,CACjC,IAAAyH,EAAAzH,EAAAwH,EACAD,EAAAL,SACAlD,EAAA9B,KAAAwF,IAAAD,GAAAvC,EACAhB,EAAAhC,KAAAyF,IAAAF,GAAAvC,EACA,KAIA,IAAA0C,EAAAL,EAAAL,SAAAlD,EAAAE,EAAA,KAGA,QAAAlE,EAAA,EAAmBA,EAAAoH,IAAcpH,EACjCuH,EAAAJ,SAAAnH,KAAAqH,GAAAD,GACAG,EAAAJ,SAAA,IAAAU,MAAAN,EAAAjC,OAAAtF,GAAA4H,IACAL,EAAAJ,SAAAnH,KAAAsH,GAAAF,GAKA,OADA/D,KAAAqD,UAAAa,GACAA,EAYArE,YAAA4E,EAAAC,EAAAhB,EAAAC,EAAAI,EAAAY,GACA,IAKAhE,EAAAE,EALA+D,EAAA,IAAA/B,OAAA7C,KAAAoC,YAEAyC,EAAAnB,EAAAK,EACAe,EAAAnB,EAAAI,EAGA,IAAAlD,EAAA,EAAeA,EAAAkD,IAAclD,EAC7B,IAAAF,EAAA,EAAiBA,EAAAoD,IAAcpD,EAAA,CAC/B,IAAAoE,EAAAN,EAAA9D,EAAAkE,EAAAnB,EAAA,EAAAmB,EAAA,EACAG,EAAAN,EAAA7D,EAAAiE,EAAAnB,EAAA,EAAAmB,EAAA,EACAF,EAAAf,SAAAkB,EAAAC,GAEArE,EAAA,GACAiE,EAAAd,SAAAjD,EAAAkD,EAAApD,EAAAE,EAAAkD,EAAApD,EAAA,GAGAE,EAAA,GACA+D,EAAAd,SAAAjD,EAAAkD,EAAApD,GAAAE,EAAA,GAAAkD,EAAApD,GAkBA,IAFAiE,EAAAK,KAVA,SAAAC,GACA,QAAAvI,EAAA,EAAqBA,EAAAiI,EAAA9B,OAAAtD,OAAyB7C,IAE9CiI,EAAA9B,OAAAnG,GAAAwI,WAAAzE,IAAAwB,KAAA0C,EAAA9B,OAAAnG,GAAAyI,SAAA1E,MACAwE,GAAA,KACAN,EAAAS,aAAAT,EAAA9B,OAAAnG,GAAAwI,aAOAxE,EAAA,EAAeA,EAAAoD,IAAcpD,EAC7BA,EAAAgE,GAAA,GACAC,EAAAU,IAAA3E,GAKA,OADAX,KAAAuF,UAAAvF,KAAAqD,UAAAuB,GACAA,EAYA/E,WAAAc,EAAAE,EAAAkD,EAAA,GAAAyB,EAAA,GAAAF,GACA,IAAAG,EAAA,IAAA5C,OAAA7C,KAAAoC,YAEA,QAAAzF,EAAA,EAAmBA,EAAAoH,EAAcpH,IACjC8I,EAAA5B,SAAAlD,EAAAhE,EAAA6I,EAAA3E,EAAA,KAGA,QAAAlE,EAAA,EAAmBA,EAAAoH,EAAA,EAAkBpH,IACrC8I,EAAA3B,SAAAnH,KAAA,GAAAoH,GAOA,YAJA2B,IAAAJ,GACAG,EAAAH,OAEAtF,KAAAqD,UAAAoC,GACAA,EAIA5F,cAAA8F,EAAAC,GACA,IAAAC,EAAA,IAAAhD,OAAA7C,KAAAoC,YAQA0D,EAAA,IAAAC,MAAAJ,EAAAC,EAAA,QACAE,EAAAE,QAAA,GACAH,EAAAhC,SAAAiC,GAGAD,EAAAhC,SAAA8B,EAAAC,EAAA,KAGAC,EAAAhC,SAAA8B,EAAA,GAAAC,EAAA,IACAC,EAAAhC,SAAA8B,EAAA,GAAAC,EAAA,IAGAC,EAAAhC,SAAA8B,EAAA,GAAAC,EAAA,KACAC,EAAAhC,SAAA8B,EAAA,GAAAC,EAAA,KAGA,IAAAK,EAAA,IAAAF,MAAAJ,EAAA,GAAAC,EAAA,YACAM,EAAA,IAAAH,MAAAJ,EAAA,GAAAC,EAAA,YACAK,EAAAD,QAAA,IACAE,EAAAF,QAAA,IACAH,EAAAhC,SAAAoC,GACAJ,EAAAhC,SAAAqC,GAGAL,EAAAhC,SAAA8B,EAAAC,EAAA,IAGAC,EAAAhC,SAAA8B,EAAA,GAAAC,EAAA,IACAC,EAAAhC,SAAA8B,EAAA,GAAAC,EAAA,IAGA,IAAAO,EAAA,IAAAJ,MAAAJ,EAAA,GAAAC,EAAA,YACAQ,EAAA,IAAAL,MAAAJ,EAAA,GAAAC,EAAA,YAsEA,OArEAO,EAAAH,QAAA,GACAI,EAAAJ,QAAA,GACAH,EAAAhC,SAAAsC,GACAN,EAAAhC,SAAAuC,GAMAP,EAAA/B,SAAA,KACA+B,EAAA/B,SAAA,MAEA+B,EAAA/B,SAAA,MAGA+B,EAAA/B,SAAA,KACA+B,EAAA/B,SAAA,MAEA+B,EAAA/B,SAAA,KACA+B,EAAA/B,SAAA,MAGA+B,EAAA/B,SAAA,KACA+B,EAAA/B,SAAA,KAGA+B,EAAA/B,SAAA,KACA+B,EAAA/B,SAAA,KAGA+B,EAAA/B,SAAA,KAGA+B,EAAA/B,SAAA,KAEA+B,EAAA/B,SAAA,KACA+B,EAAA/B,SAAA,MAGA+B,EAAA/B,SAAA,KAEA+B,EAAA/B,SAAA,KAGA+B,EAAA/B,SAAA,KACA+B,EAAA/B,SAAA,KAIA+B,EAAA/B,SAAA,KACA+B,EAAA/B,SAAA,KAEA+B,EAAA/B,SAAA,KACA+B,EAAA/B,SAAA,KACA+B,EAAA/B,SAAA,KACA+B,EAAA/B,SAAA,KAEA+B,EAAA/B,SAAA,KACA+B,EAAA/B,SAAA,KAGA+B,EAAA/B,SAAA,KACA+B,EAAA/B,SAAA,MAGA+B,EAAA/B,SAAA,MACA+B,EAAA/B,SAAA,OAEA9D,KAAAqD,UAAAwC,GACAA,SCxVe,SAASQ,EAAM1F,EAAAE,GAC9Bb,KAAAW,KAAA,EACAX,KAAAa,KAAA,EAIAwF,EAAMnE,KAAA,SAAAoE,EAAAC,GACN,OAAAD,EAAApE,KAAAqE,IAEAF,EAAMG,OAAA,SAAAF,EAAAC,GACN,OAAAD,EAAAE,OAAAD,IAEAF,EAAMvF,IAAA,SAAAwF,EAAAC,GACN,WAAaF,EAAMC,EAAA3F,EAAA4F,EAAA5F,EAAA2F,EAAAzF,EAAA0F,EAAA1F,IAEnBwF,EAAMI,IAAA,SAAAH,EAAAC,GACN,WAAaF,EAAMC,EAAA3F,EAAA4F,EAAA5F,EAAA2F,EAAAzF,EAAA0F,EAAA1F,IAEnBwF,EAAMK,UAAA,SAAAC,GACN,IAAAC,EAAA,IAAcP,EAAM,KAGpB,OAFAO,EAAAjG,EAAA9B,KAAAwF,IAAAsC,GACAC,EAAA/F,EAAAhC,KAAAyF,IAAAqC,GACAC,GAEAP,EAAMQ,SAAA,SAAAD,GACN,OAASP,EAAMK,UAAA7H,KAAAC,SAAAD,KAAAI,GAAA,MAIfoH,EAAM9H,UAAA,CACNuI,OAAA,SAAApH,EAAAC,GACA,IAAAiH,EAAA,IAAgBP,EAAM3G,EAAAC,GAGtB,OAFAK,KAAAW,GAAA/B,mBAAAgI,EAAAjG,EACAX,KAAAa,GAAAjC,mBAAAgI,EAAA/F,EACAb,MAEAyG,IAAA,SAAA9F,EAAAE,GAQA,OAPA,IAAAtB,UAAAC,QACAQ,KAAAW,OACAX,KAAAa,GAAAF,EAAAE,GACK,IAAAtB,UAAAC,SACLQ,KAAAW,KACAX,KAAAa,MAEAb,MAEAc,IAAA,SAAAH,EAAAE,GAQA,OAPA,IAAAtB,UAAAC,QACAQ,KAAAW,OACAX,KAAAa,GAAAF,EAAAE,GACK,IAAAtB,UAAAC,SACLQ,KAAAW,KACAX,KAAAa,MAEAb,MAEA+G,KAAA,SAAAH,GAQA,MAPA,iBAAAA,GACA5G,KAAAW,GAAAiG,EACA5G,KAAAa,GAAA+F,IAEA5G,KAAAW,GAAAiG,EAAAjG,EACAX,KAAAa,GAAA+F,EAAA/F,GAEAb,MAEAgH,IAAA,SAAAJ,GAQA,MAPA,iBAAAA,GACA5G,KAAAW,GAAAiG,EACA5G,KAAAa,GAAA+F,IAEA5G,KAAAW,GAAAiG,EAAAjG,EACAX,KAAAa,GAAA+F,EAAA/F,GAEAb,MAEAiH,SAAA,SAAAN,GACA,IAAAO,EAAAlH,KAAAmH,MACAnH,KAAAW,EAAA9B,KAAAwF,IAAAsC,GAAAO,EACAlH,KAAAa,EAAAhC,KAAAyF,IAAAqC,GAAAO,GAEAC,IAAA,WACA,OAAAtI,KAAAuI,KAAApH,KAAAW,EAAAX,KAAAW,EAAAX,KAAAa,EAAAb,KAAAa,IAEAwG,MAAA,WACA,OAAArH,KAAAW,EAAAX,KAAAW,EAAAX,KAAAa,EAAAb,KAAAa,GAEAL,MAAA,SAAAG,EAAAE,GAGA,OAFAb,KAAAW,IACAX,KAAAa,IACAb,MAEAsH,OAAA,SAAA1J,GAGA,OAFAoC,KAAAuH,YACAvH,KAAA+G,KAAAnJ,GACAoC,MAEAuH,UAAA,WACA,IAAAxK,EAAAiD,KAAAmH,MAIA,OAHApK,EAAA,GACAiD,KAAAgH,IAAAjK,GAEAiD,MAEAwH,YAAA,SAAAhI,GACA,IAAA2H,EAAAnH,KAAAmH,MAKA,OAJAA,EAAA,IACAA,EAAA3H,EAAA2H,EACAnH,KAAA+G,KAAAI,IAEAnH,MAEAyH,MAAA,SAAApI,GAKA,OAJAW,KAAAmH,MAAA9H,IACAW,KAAAuH,YACAvH,KAAA+G,KAAA1H,IAEAW,MAEA0H,QAAA,WACA,OAAA7I,KAAA8I,OAAA3H,KAAAa,EAAAb,KAAAW,IAEAuB,KAAA,SAAA0E,GACA,IAAAgB,EAAA5H,KAAAW,EAAAiG,EAAAjG,EACAkH,EAAA7H,KAAAa,EAAA+F,EAAA/F,EACA,OAAAhC,KAAAuI,KAAAQ,IAAAC,MAEArB,OAAA,SAAAI,GACA,IAAAgB,EAAA5H,KAAAW,EAAAiG,EAAAjG,EACAkH,EAAA7H,KAAAa,EAAA+F,EAAA/F,EACA,OAAA+G,IAAAC,KAEAC,KAAA,WACA,WAAezB,EAAMrG,KAAAW,EAAAX,KAAAa,IAErBkH,SAAA,WAGA,OAFA/H,KAAAW,GAAAX,KAAAW,EACAX,KAAAa,GAAAb,KAAAa,EACAb,MAEAgI,MAAA,WACA,OAAAhI,KAAAW,EAAAX,KAAAa,IAEAoH,SAAA,WACA,UAAAjI,KAAAW,EAAA,KAAAX,KAAAa,EAAA,KAAAb,KAAAkI,EAAA,KAEAC,QAAA,SAAAvB,GACA,IAAAwB,GAAApI,KAAAW,EAAAiG,EAAAjG,EAAAX,KAAAa,EAAA+F,EAAA/F,IAAA+F,EAAAjG,EAAAiG,EAAAjG,EAAAiG,EAAA/F,EAAA+F,EAAA/F,GAGA,OAFAb,KAAAW,EAAAyH,EAAAxB,EAAAjG,EACAX,KAAAa,EAAAuH,EAAAxB,EAAA/F,EACAb,MAEAqI,OAAA,SAAA3I,GACA,IAAAC,EAAAK,KAAA0H,UAAAhI,EACA1C,EAAAgD,KAAAmH,MACAnH,KAAAW,EAAA9B,KAAAwF,IAAA1E,GAAA3C,EACAgD,KAAAa,EAAAhC,KAAAyF,IAAA3E,GAAA3C,IC5JA2B,OAAA2J,MAAenG,EACfxD,OAAAyB,OAAgBiG,EAChB1H,OAAAoH,MCVe,MACflG,YAAAc,EAAAE,EAAA0H,EAAAC,EAAA3G,GACA7B,KAAAU,IAAA,IAAAN,OAAAO,EAAAE,GACAb,KAAAyI,OAAA,IAAArI,OAAAO,GAAA4H,GAAA,GAAA1H,GAAA2H,GAAA,IACAxI,KAAA0I,OAAA,IACA1I,KAAA2I,SAAA,IACA3I,KAAA4I,eAAA,GACA5I,KAAA6I,QAAA,IAAAzI,OAAA,KACAJ,KAAA8I,QAAA,EACA9I,KAAA6B,UAAA,EACA7B,KAAA+I,MAAA,UACA/I,KAAAgJ,KAAA,EACAhJ,KAAA8C,OAAA,GAEA9C,KAAAiJ,SAAA,EAGApJ,WAAAqJ,GACAlJ,KAAA6I,QAAAK,EAEArJ,YAAAsJ,GACAnJ,KAAAiJ,SAAAE,EAEAtJ,QAAA9C,GACAiD,KAAAgJ,KAAAjM,EAEA8C,UAAAgC,GACA7B,KAAA6B,SAGAhC,gBACAG,KAAAyI,OAAAjI,MAAAR,KAAAU,IAAAC,EAAAX,KAAAU,IAAAG,GAEAhB,MACAG,KAAA8I,QAAA,EAEAjJ,QACAG,KAAA8I,QAAA,EAGAjJ,OAAA8G,EAAAtG,GACA,IAAAM,EAAAN,EAAAM,GAAAX,KAAAU,IAAAC,EAAAN,EAAAM,GAAA9B,KAAAwF,IAAAsC,IAAA3G,KAAAU,IAAAG,EAAAR,EAAAQ,GAAAhC,KAAAyF,IAAAqC,GACA9F,EAAAR,EAAAQ,GAAAb,KAAAU,IAAAC,EAAAN,EAAAM,GAAA9B,KAAAyF,IAAAqC,IAAA3G,KAAAU,IAAAG,EAAAR,EAAAQ,GAAAhC,KAAAwF,IAAAsC,GACA3G,KAAAU,IAAAF,MAAAG,EAAAE,GAGAhB,iBAAApB,EAAAoD,EAAAuH,GACA,IAAAC,EAAAjJ,OAAAU,IAAAd,KAAAU,IAAAjC,EAAAiC,KACAwB,EAAAmH,EAAAhC,QAEA,IAAAiC,EAAAzH,MAAA7B,KAAA6B,OAAA7B,KAAA6B,OACA,GAAAK,EAAAoH,EAAA,CACA,IAAAH,EAAAE,EAAA7B,YAAA,EAAAtF,EAAAoH,GAAAvC,KAAAqC,GAAApJ,KAAAiJ,UACAjJ,KAAAuJ,WAAAJ,IAIAtJ,WAAAsJ,GACAnJ,KAAAU,IAAA+F,IAAA0C,GAGAtJ,SAAAc,EAAAE,EAAA2I,EAAA3H,EAAA4H,GACAzJ,KAAAU,IAAAC,IAAAkB,EAAAhD,KAAAwF,IAAAmF,EAAAC,GACAzJ,KAAAU,IAAAG,IAAAgB,EAAAhD,KAAAyF,IAAAkF,EAAAC,GAGA5J,YAWAG,KAAAU,IAAAC,EAAA2B,MAAAtC,KAAA6B,SACA7B,KAAAU,IAAAC,EAAA2B,MAAAtC,KAAA6B,QAGA7B,KAAAU,IAAAC,EAAAX,KAAA6B,SACA7B,KAAAU,IAAAC,EAAAX,KAAA6B,QAGA7B,KAAAU,IAAAG,EAAA2B,OAAAxC,KAAA6B,SACA7B,KAAAU,IAAAG,EAAA2B,OAAAxC,KAAA6B,QAGA7B,KAAAU,IAAAG,EAAAb,KAAA6B,SACA7B,KAAAU,IAAAG,EAAAb,KAAA6B,QAMAhC,SACA,GAAAG,KAAA8I,OAAA,OACA,IAAAY,EAAAtJ,OAAAU,IAAAd,KAAAU,IAAAV,KAAAyI,QAGA,GAFAiB,EAAA3C,KAAA/G,KAAA2I,UAEA3I,KAAAU,IAAAG,GAAA2B,OAAAxC,KAAA6B,QAAA6H,EAAArC,QAAA,MACA,IAAAtK,EAAA2M,EAAAvC,MACAuC,EAAA/I,GAAA5D,EACA2M,EAAA7I,GAAA9D,EACA2M,EAAA3C,KAAAhK,EAAAiD,KAAA4I,gBAEA5I,KAAAyI,OAAAjI,MAAAR,KAAAU,IAAAC,EAAAX,KAAAU,IAAAG,GACAb,KAAAU,IAAA+F,IAAAiD,GACA1J,KAAAU,IAAA+F,IAAAzG,KAAA6I,SAGAhJ,SACA4B,IAAAC,YACAD,IAAAkI,UAAA3J,KAAA+I,MACAtH,IAAAG,IAAA5B,KAAAU,IAAAC,EAAAX,KAAAU,IAAAG,EAAAb,KAAA6B,OAAA,IAAAhD,KAAAI,IACAwC,IAAAmI,OACAnI,IAAAM,cD1GApD,OAAA6F,MEXe,MACf3E,YAAAgK,EAAAC,EAAAtK,EAAAuK,GACA/J,KAAAmF,WAAA0E,EACA7J,KAAAoF,SAAA0E,EACA9J,KAAA+J,aAAA,EACA/J,KAAA+I,MAAA,UAIA/I,KAAAR,OAHAA,GACAQ,KAAAmF,WAAAzE,IAAAwB,KAAAlC,KAAAoF,SAAA1E,KAIAV,KAAAmF,WAAArC,OAAAC,KAAA/C,MACAA,KAAAoF,SAAAtC,OAAAC,KAAA/C,MAGAH,OAAAmK,GAoBA,IAAApC,EAAA5H,KAAAoF,SAAA1E,IAAAC,EAAAX,KAAAmF,WAAAzE,IAAAC,EACAkH,EAAA7H,KAAAoF,SAAA1E,IAAAG,EAAAb,KAAAmF,WAAAzE,IAAAG,EACAqB,EAAArD,KAAAuI,KAAAQ,IAAAC,KACAoC,GAAAjK,KAAAR,OAAA0C,KAAAlC,KAAA+J,UAEAG,EAAAtC,EAAAqC,EAAA,GACAE,EAAAtC,EAAAoC,EAAA,GAGAG,EAAApK,KAAAmF,WAAA6D,KAAAhJ,KAAAoF,SAAA4D,KACAqB,EAAArK,KAAAmF,WAAA6D,KAAAoB,EACAA,EAAApK,KAAAoF,SAAA4D,KAAAoB,EAEApK,KAAAmF,WAAA2D,SACA9I,KAAAmF,WAAAzE,IAAAC,GAAAuJ,EAAAE,EACApK,KAAAmF,WAAAzE,IAAAG,GAAAsJ,EAAAC,GAEApK,KAAAoF,SAAA0D,SACA9I,KAAAoF,SAAA1E,IAAAC,GAAAuJ,EAAAG,EACArK,KAAAoF,SAAA1E,IAAAG,GAAAsJ,EAAAE,GAsBAxK,SACA4B,IAAAC,YACAD,IAAAE,YAAA3B,KAAA+I,MACAtH,IAAA6I,OAAAtK,KAAAmF,WAAAzE,IAAAC,EAAAX,KAAAmF,WAAAzE,IAAAG,GACAY,IAAA8I,OAAAvK,KAAAoF,SAAA1E,IAAAC,EAAAX,KAAAoF,SAAA1E,IAAAG,GACAY,IAAAK,SACAL,IAAAM,cFtEApD,OAAAkE,OGTe,MAKfhD,YAAAuC,GACApC,KAAAiC,OAAA,GACAjC,KAAA8C,OAAA,GACA9C,KAAAoC,cAAA,GA6BAvC,WAAAqJ,GACA,QAAAvM,EAAA,EAAmBA,EAAAqD,KAAAiC,OAAAzC,OAAwB7C,IAC3CqD,KAAAiC,OAAAtF,GAAA6N,WAAAtB,GAQArJ,IAAAmD,GACAhD,KAAAiC,OAAAe,GAAAsC,MAOAzF,aAAApB,GACAuB,KAAA8C,OAAAI,OAAAlD,KAAA8C,OAAAG,QAAAxE,EAAAqE,OAAA,OACArE,EAAAqE,OAAAI,OAAA,KAQArD,YAAAc,EAAAE,GACAb,KAAAiC,OAAAwI,IAAAtL,IACAA,EAAAsJ,OAAA9H,KACAxB,EAAAsJ,OAAA5H,OAaAhB,SAAAc,EAAAE,EAAA0H,EAAAC,EAAA3G,GACA,IAAApD,EAOA,OALAA,EADAkC,aAAAoF,MACApF,EAEA,IAAAoF,MAAApF,EAAAE,EAAA0H,EAAAC,EAAA3G,GAEA7B,KAAAiC,OAAAc,KAAAtE,GACAA,EASAoB,SAAAgK,EAAAC,EAAAtK,GAGAqK,aAAArF,MACAxE,KAAA8C,OAAAC,KAAA8G,GAEA7J,KAAA8C,OAAAC,KAAA,IAAAyB,MAAAxE,KAAAiC,OAAA4H,GAAA7J,KAAAiC,OAAA6H,GAAAtK,IAOAK,eACA,QAAAlD,EAAA,EAAmBA,EAAAqD,KAAAiC,OAAAzC,OAAwB7C,IAC3CqD,KAAAiC,OAAAtF,GAAA6G,SAQA3D,aAAAmK,GACA,QAAArN,EAAA,EAAmBA,EAAAqD,KAAA8C,OAAAtD,OAAwB7C,IAC3CqD,KAAA8C,OAAAnG,GAAA6G,OAAAwG,GAOAnK,eACA,QAAAlD,EAAA,EAAmBA,EAAAqD,KAAAiC,OAAAzC,OAAwB7C,IAC3CqD,KAAAiC,OAAAtF,GAAA8G,SAOA5D,kBACA,QAAAlD,EAAA,EAAmBA,EAAAqD,KAAAiC,OAAAzC,OAAwB7C,IAC3CqD,KAAAiC,OAAAtF,GAAA+N,YAOA7K,eACA,QAAAlD,EAAA,EAAmBA,EAAAqD,KAAA8C,OAAAtD,OAAwB7C,IAC3CqD,KAAA8C,OAAAnG,GAAA8G,SAOA5D,oBACA,QAAAlD,EAAA,EAAmBA,EAAAqD,KAAAiC,OAAAzC,OAAwB7C,IAC3C8E,IAAAC,YACAD,IAAAkI,UAAA,QACAlI,IAAAkJ,SAAAhO,EAAAqD,KAAAiC,OAAAtF,GAAA+D,IAAAC,EAAA,EAAAX,KAAAiC,OAAAtF,GAAA+D,IAAAG,EAAA,GACAY,IAAAM,YAOAlC,SAEAG,KAAA4K,eACA,QAAAC,EAAA,EAAmBA,EAAA7K,KAAAoC,aAAqByI,EACxC7K,KAAA8K,eACA9K,KAAA+K,kBAMAlL,SACAG,KAAAgL,eACAhL,KAAAiL,iBH5KAtM,OAAAuM,WIbe,MACfrL,YAAAc,EAAAE,EAAAsK,EAAAC,GACApL,KAAAW,IACAX,KAAAa,IACAb,KAAAmL,OACAnL,KAAAqL,cAAArL,KAAAmL,KACAnL,KAAAoC,WAAA,GAEApC,KAAAsL,EAAA,CACA,YACA,YACA,YACA,YACA,aAGAtL,KAAAuL,EAAA,CACA,YACA,YACA,YACA,YACA,aAIAvL,KAAAwL,EAAA,CACA,YACA,YACA,YACA,YACA,aAIAxL,KAAAyL,EAAA,CACA,YACA,YACA,YACA,YACA,aAIAzL,KAAA0L,EAAA,CACA,YACA,YACA,YACA,YACA,aAIA1L,KAAA2L,EAAA,CACA,YACA,YACA,YACA,YACA,aAIA3L,KAAA4L,EAAA,CACA,YACA,YACA,YACA,YACA,aAKA5L,KAAA6L,EAAA,CACA,YACA,YACA,YACA,YACA,aAIA7L,KAAA8L,EAAA,CACA,YACA,YACA,YACA,YACA,aAIA9L,KAAA+L,EAAA,CACA,cACA,cACA,cACA,cACA,cACA,eAIA/L,KAAAgM,EAAA,CACA,YACA,YACA,YACA,YACA,aAIAhM,KAAAiM,EAAA,CACA,YACA,YACA,YACA,YACA,aAIAjM,KAAAkM,EAAA,CACA,YACA,YACA,YACA,YACA,aAIAlM,KAAAmM,EAAA,CACA,YACA,YACA,YACA,YACA,aAIAnM,KAAAoM,EAAA,CACA,YACA,YACA,YACA,YACA,aAIApM,KAAAqM,EAAA,CACA,YACA,YACA,YACA,YACA,aAIArM,KAAAsM,EAAA,CACA,YACA,YACA,YACA,YACA,aAIAtM,KAAAuM,EAAA,CACA,YACA,YACA,YACA,YACA,aAIAvM,KAAAwM,EAAA,CACA,YACA,YACA,YACA,YACA,aAGAxM,KAAAyM,QAAA,CACAnB,EAAAtL,KAAAsL,EACAC,EAAAvL,KAAAuL,EACAC,EAAAxL,KAAAwL,EACAC,EAAAzL,KAAAyL,EACAC,EAAA1L,KAAA0L,EACAG,EAAA7L,KAAA6L,EACAD,EAAA5L,KAAA4L,EACAD,EAAA3L,KAAA2L,EACAG,EAAA9L,KAAA8L,EACAC,EAAA/L,KAAA+L,EACAC,EAAAhM,KAAAgM,EACAC,EAAAjM,KAAAiM,EACAC,EAAAlM,KAAAkM,EACAC,EAAAnM,KAAAmM,EACAC,EAAApM,KAAAoM,EACAC,EAAArM,KAAAqM,EACAC,EAAAtM,KAAAsM,EACAC,EAAAvM,KAAAuM,EACAC,EAAAxM,KAAAwM,GAIA,IAAAE,EAAA1M,KAAAyM,QAAArB,GAEApL,KAAA2M,KAAA,IAAA9J,OAAA7C,KAAAoC,YAGA,QAAAzB,EAAA,EAAmBA,EAAA+L,EAAAlN,OAAsBmB,IACzC,QAAAE,EAAA,EAAqBA,EAAA6L,EAAA/L,GAAAnB,OAAyBqB,IAC9C,MAAA6L,EAAA7L,GAAAF,GAAA,CACA,IAAAlC,EAAA,IAAAsH,MAAA/F,KAAAW,IAAAX,KAAAmL,KAAAnL,KAAAa,IAAAb,KAAAmL,MACA1M,EAAAmO,UAAA,GACA5M,KAAA2M,KAAA9I,SAAApF,GAMA,QAAA9B,EAAA,EAAmBA,EAAAqD,KAAA2M,KAAA1K,OAAAzC,OAA6B7C,IAChD,QAAAkO,EAAA,EAAqBA,EAAA7K,KAAA2M,KAAA1K,OAAAzC,QACrBQ,KAAA2M,KAAA1K,OAAAtF,IAAAqD,KAAA2M,KAAA1K,OAAA4I,GADkDA,IAAA,CAElD,IAAA5N,EAAA+C,KAAA2M,KAAA1K,OAAAtF,GAAA+D,IAAAwB,KAAAlC,KAAA2M,KAAA1K,OAAA4I,GAAAnK,KAEAzD,EAAA,GAAAA,EAAA+C,KAAAmL,KAAAnL,KAAAqL,eACArL,KAAA2M,KAAA7I,SAAAnH,EAAAkO,MJjNegC,EAAA","file":"verly.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","window.normalizedRandom = function () {\r\n  return Math.random() * 2 - 1;\r\n};\r\nwindow.degreesToRad = function (degrees) {\r\n  var pi = Math.PI;\r\n  return degrees * (pi / 180);\r\n}\r\nwindow.clamp = function (t, e, i) {\r\n  return Math.min(Math.max(t, Math.min(e, i)), Math.max(e, i))\r\n}\r\nwindow.random = function (rand, min, max) {\r\n  //one param\r\n  if (arguments.length === 1) {\r\n    return Math.random() * arguments[0];\r\n  } else if (arguments.length == 2) {\r\n    //min and max\r\n    max = min;\r\n    min = rand;\r\n    rand = Math.random;\r\n  }\r\n  if (!min && !max) {\r\n    return Math.random();\r\n  } else if (!max) {\r\n    //if only one is provided, then thats actually the max\r\n    max = min;\r\n    return rand() * max;\r\n  }\r\n  return rand() * (max - min) + min;\r\n};\r\n\r\nwindow.lerp = function(a, b, p) {\r\n  return (b - a) * p + a;\r\n}\r\n","export default class Mouse {\r\n  constructor(entities, canvas) {\r\n    this.entities = entities;\r\n    // Drag Interaction\r\n    this.draggedPoint = null;\r\n    this.down = false;\r\n    this.coord = new Vector();\r\n    this.offset = new Vector();\r\n    this.offsetCoord = new Vector();\r\n    this.canvas = canvas;\r\n\r\n    this.canvas.addEventListener('mousedown', (e) => {\r\n      this.down = true;\r\n      if (this.draggedPoint) {\r\n        this.offset.setXY(e.offsetX - this.draggedPoint.pos.x, e.offsetY - this.draggedPoint.pos.y);\r\n        this.offsetCoord = Vector.sub(this.coord, this.offset);\r\n      }\r\n    })\r\n    this.canvas.addEventListener('mouseup', (e) => {\r\n      if (this.draggedPoint) {\r\n        this.draggedPoint.resetVelocity();\r\n      };\r\n      this.down = false;\r\n      this.draggedPoint = null;\r\n    })\r\n\r\n    this.canvas.addEventListener('mousemove', (e) => {\r\n      this.coord.setXY(e.offsetX, e.offsetY);\r\n      this.offsetCoord = Vector.sub(this.coord, this.offset);\r\n    })\r\n\r\n    // TOUCH\r\n    this.canvas.addEventListener('touchstart', (e) => {\r\n      let offset = e.touches[0];\r\n      this.down = true;\r\n      if (this.draggedPoint) {\r\n        this.offset.setXY(offset.clientX - this.draggedPoint.pos.x, offset.clientY - this.draggedPoint.pos.y);\r\n        this.offsetCoord = Vector.sub(this.coord, this.offset);\r\n      }\r\n    })\r\n    this.canvas.addEventListener('touchend', (e) => {\r\n      if (this.draggedPoint) {\r\n        this.draggedPoint.resetVelocity();\r\n      };\r\n      this.down = false;\r\n      this.draggedPoint = null;\r\n    })\r\n    this.canvas.addEventListener('touchmove', (e) => {\r\n      let offset = e.touches[0];\r\n      this.coord.setXY(offset.pageX, offset.pageY);\r\n      this.offsetCoord = Vector.sub(this.coord, this.offset);\r\n    })\r\n  }\r\n\r\n  dragPoint() {\r\n    if (!this.down) return;\r\n    this.draggedPoint.pos.setXY(this.offsetCoord.x, this.offsetCoord.y);\r\n  }\r\n\r\n  drag() {\r\n    if (!this.down) {\r\n      this.draggedPoint = this.getNearestPoint();\r\n    }\r\n    if (this.draggedPoint) {\r\n      this.renderDraggedPoint(this.draggedPoint);\r\n      this.dragPoint();\r\n    }\r\n  }\r\n  \r\n  renderDraggedPoint(point) {\r\n    ctx.beginPath();\r\n    ctx.strokeStyle = 'black';\r\n    ctx.arc(point.pos.x, point.pos.y, point.radius * 1.5, 0, Math.PI * 2);\r\n    ctx.stroke();\r\n    ctx.closePath();\r\n  }\r\n\r\n\r\n  getNearestPoint() {\r\n    // if (!this.down) return false;\r\n    let d = 20;\r\n    let p = null;\r\n    for (let k = 0; k < this.entities.length; k++) {\r\n      for (let i = 0; i < this.entities[k].points.length; i++) {\r\n        let dist = this.entities[k].points[i].pos.dist(this.coord);\r\n        if (dist < d) {\r\n          p = this.entities[k].points[i];\r\n        }\r\n      }\r\n    }\r\n    return p;\r\n  }\r\n}\r\n","import Mouse from './Mouse';\r\n\r\n/**\r\n * @class Verly\r\n * @version 1.1.3\r\n * @author <hazru.anurag@gmail.com>\r\n */\r\nclass Verly {\r\n  constructor(iterations, canvas, ctx) {\r\n    this.entities = [];\r\n    this.iterations = iterations;\r\n    this.currentFrame = 0;\r\n    this.canvas = canvas;\r\n    window.WIDTH = canvas.width;\r\n    window.HEIGHT = canvas.height;\r\n    window.ctx = ctx;\r\n    this.mouse = new Mouse(this.entities, this.canvas);\r\n  }\r\n\r\n  /**\r\n   * Joins two Entity Class Together\r\n   * @param  {...Entity} args \r\n   */\r\n  joinEntities(...args) {\r\n    let mixEntity = new Entity(this.iterations);\r\n\r\n    let points = [];\r\n    let sticks = [];\r\n\r\n    // loop through the args and push points and sticks to the array\r\n    for (let i = 0; i < args.length; i++) {\r\n      points.push(args[i].points);\r\n      sticks.push(args[i].sticks);\r\n\r\n      // get the index which item we should splice in [this.entities]\r\n      let index = this.entities.indexOf(args[i]);\r\n      this.entities.splice(index, 1);\r\n    }\r\n\r\n    // join multiple arrays\r\n    points = [].concat.apply([], points);\r\n    sticks = [].concat.apply([], sticks);\r\n\r\n    // add the arrays to the mix::Entity\r\n    mixEntity.points = points;\r\n    mixEntity.sticks = sticks;\r\n\r\n    // add the mix::Entity to [this.entities]\r\n    this.addEntity(mixEntity);\r\n    return mixEntity; // return for chaining\r\n  }\r\n\r\n  addEntity(e) {\r\n    this.entities.push(e);\r\n  }\r\n\r\n  renderPointIndex() {\r\n    for (let i = 0; i < this.entities.length; i++) {\r\n      this.entities[i].renderPointsIndex();\r\n    }\r\n  }\r\n\r\n    \r\n  /**\r\n   * @method interact\r\n   * drags points\r\n   */\r\n  interact() {\r\n    this.mouse.drag();\r\n  }\r\n\r\n  /**\r\n   * @method update\r\n   * updates all the physics stuff\r\n   */\r\n  update() {\r\n    for (let i = 0; i < this.entities.length; i++) {\r\n      this.entities[i].update();\r\n    }\r\n\r\n    this.currentFrame++;\r\n  }\r\n  \r\n  /**\r\n   * @method render\r\n   * renders all the entity\r\n   */\r\n  render() {\r\n    for (let i = 0; i < this.entities.length; i++) {\r\n      this.entities[i].render();\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n  /**\r\n   * @method createBox\r\n   * @param {number} x \r\n   * @param {number} y \r\n   * @param {number} w \r\n   * @param {number} h \r\n   */\r\n  createBox(x, y, w, h) {\r\n    const box = new Entity(this.iterations);\r\n    box.addPoint(x, y, 0, 0);\r\n    box.addPoint(x + w, y, 0, 0);\r\n    box.addPoint(x + w, y + h, 0, 0);\r\n    box.addPoint(x, y + h, 0, 0);\r\n    box.addStick(0, 1);\r\n    box.addStick(1, 2);\r\n    box.addStick(2, 3);\r\n    box.addStick(3, 0);\r\n    box.addStick(3, 1);\r\n\r\n    this.addEntity(box);\r\n    return box;\r\n  }\r\n\r\n\r\n  /**\r\n   * @method createHexagon\r\n   * @param {number} x \r\n   * @param {number} y \r\n   * @param {number} segments \r\n   * @param {number} radius=50\r\n   * @param {number} stride1=1\r\n   * @param {number} stride2=5\r\n   */\r\n  createHexagon(x, y, segments, radius = 50, stride1 = 1, stride2 = 5) {\r\n    const hexagon = new Entity(this.iterations);\r\n\r\n    let stride = (2 * Math.PI) / segments;\r\n\r\n    // points\r\n    for (let i = 0; i < segments; ++i) {\r\n      let theta = i * stride;\r\n      hexagon.addPoint(\r\n        x + Math.cos(theta) * radius,\r\n        y + Math.sin(theta) * radius,\r\n        0, 0\r\n      );\r\n    }\r\n\r\n    let center = hexagon.addPoint(x, y, 0, 0);\r\n\r\n    // sticks\r\n    for (let i = 0; i < segments; ++i) {\r\n      hexagon.addStick(i, (i + stride1) % segments);\r\n      hexagon.addStick(new Stick(hexagon.points[i], center));\r\n      hexagon.addStick(i, (i + stride2) % segments);\r\n    }\r\n\r\n\r\n    this.addEntity(hexagon);\r\n    return hexagon;\r\n  }\r\n\r\n  /**\r\n   * @method createCloth\r\n   * @param {number} posx \r\n   * @param {number} posy \r\n   * @param {number} w \r\n   * @param {number} h \r\n   * @param {number} segments \r\n   * @param {number} pinOffset \r\n   */\r\n  createCloth(posx, posy, w, h, segments, pinOffset) {\r\n    let cloth = new Entity(this.iterations);\r\n\r\n    let xStride = w / segments;\r\n    let yStride = h / segments;\r\n\r\n    let x, y;\r\n    for (y = 0; y < segments; ++y) {\r\n      for (x = 0; x < segments; ++x) {\r\n        let px = posx + x * xStride - w / 2 + xStride / 2;\r\n        let py = posy + y * yStride - h / 2 + yStride / 2;\r\n        cloth.addPoint(px, py);\r\n\r\n        if (x > 0) {\r\n          cloth.addStick(y * segments + x, y * segments + x - 1);\r\n        }\r\n\r\n        if (y > 0) {\r\n          cloth.addStick(y * segments + x, (y - 1) * segments + x);\r\n        }\r\n      }\r\n    }\r\n\r\n    // as the name suggest\r\n    function tear(threshold) {\r\n      for (let i = 0; i < cloth.sticks.length; i++) {\r\n        // find the distance between two points\r\n        let dist = cloth.sticks[i].startPoint.pos.dist(cloth.sticks[i].endPoint.pos)\r\n        if (dist > (threshold || 20)) { // remove if the dist is > than threshold \r\n          cloth.removeSticks(cloth.sticks[i].startPoint);\r\n        }\r\n      }\r\n    }\r\n\r\n    cloth.tear = tear;\r\n\r\n    for (x = 0; x < segments; ++x) {\r\n      if (x % pinOffset == 0) { // magic\r\n        cloth.pin(x);\r\n      }\r\n    }\r\n\r\n    !this.dontPush && this.addEntity(cloth);\r\n    return cloth;\r\n  }\r\n\r\n\r\n  /**\r\n   * @method createRope\r\n   * @param {number} x \r\n   * @param {number} y \r\n   * @param {number} segments=10\r\n   * @param {number} gap=15\r\n   * @param {number} pin=0\r\n   */\r\n  createRope(x, y, segments = 10, gap = 15, pin) {\r\n    let rope = new Entity(this.iterations);\r\n\r\n    for (let i = 0; i < segments; i++) {\r\n      rope.addPoint(x + i * gap, y, 0, 0)\r\n    }\r\n\r\n    for (let i = 0; i < segments - 1; i++) {\r\n      rope.addStick(i, (i + 1) % segments);\r\n    }\r\n\r\n    if (pin !== undefined) {\r\n      rope.pin(pin);\r\n    }\r\n    this.addEntity(rope);\r\n    return rope;\r\n  }\r\n\r\n\r\n  createRagdoll(x0, y0) {\r\n    let ragdoll = new Entity(this.iterations);\r\n\r\n    // Head\r\n    // x, y, extremity, gravity, radius\r\n    // let h = ;\r\n    // h.head = true;\r\n    // h.oldx = x0 + (Math.random() - 0.5) * 25;\r\n\r\n    let head = new Point(x0, y0, 0, 0, 15);\r\n    head.setMass(5);\r\n    ragdoll.addPoint(head);\r\n\r\n    // Groin\r\n    ragdoll.addPoint(x0, y0 + 100);\r\n\r\n    // Hips\r\n    ragdoll.addPoint(x0 + 30, y0 + 90);\r\n    ragdoll.addPoint(x0 - 30, y0 + 90);\r\n\r\n    // Knees\r\n    ragdoll.addPoint(x0 + 20, y0 + 150);\r\n    ragdoll.addPoint(x0 - 20, y0 + 150);\r\n\r\n    // Feet\r\n    let f1 = new Point(x0 + 30, y0 + 190, 0, 0, 10);\r\n    let f2 = new Point(x0 - 30, y0 + 190, 0, 0, 10);\r\n    f1.setMass(20);\r\n    f2.setMass(20);\r\n    ragdoll.addPoint(f1);\r\n    ragdoll.addPoint(f2);\r\n\r\n    // Neck\r\n    ragdoll.addPoint(x0, y0 + 25);\r\n\r\n    // Shoulders\r\n    ragdoll.addPoint(x0 + 25, y0 + 30);\r\n    ragdoll.addPoint(x0 - 25, y0 + 30);\r\n\r\n    // Hands\r\n    let h1 = new Point(x0 + 15, y0 + 105, 0, 0, 10);\r\n    let h2 = new Point(x0 - 15, y0 + 105, 0, 0, 10);\r\n    h1.setMass(5);\r\n    h2.setMass(5);\r\n    ragdoll.addPoint(h1);\r\n    ragdoll.addPoint(h2);\r\n\r\n\r\n\r\n    // \"Muscles\"\r\n    // Head - shoulders\r\n    ragdoll.addStick(0, 9);\r\n    ragdoll.addStick(0, 10);\r\n    // Shoulder - shoulder\r\n    ragdoll.addStick(9, 10);\r\n\r\n    // Shoulders - hips\r\n    ragdoll.addStick(9, 2);\r\n    ragdoll.addStick(10, 3);\r\n    // Shoulders - hips opposite side\r\n    ragdoll.addStick(9, 3);\r\n    ragdoll.addStick(10, 2);\r\n\r\n    // Hips - feet\r\n    ragdoll.addStick(2, 6);\r\n    ragdoll.addStick(3, 7);\r\n\r\n    // Hips - feet, opposite\r\n    ragdoll.addStick(2, 7);\r\n    ragdoll.addStick(3, 6);\r\n\r\n    // Head - groin\r\n    ragdoll.addStick(0, 1);\r\n\r\n    // Hip - hip\r\n    ragdoll.addStick(2, 3);\r\n    // Shoulder - hip\r\n    ragdoll.addStick(9, 2);\r\n    ragdoll.addStick(10, 3);\r\n\r\n    // Head - knee\r\n    ragdoll.addStick(0, 4);\r\n    // Head - knee\r\n    ragdoll.addStick(0, 5);\r\n\r\n    // Head feet\r\n    ragdoll.addStick(0, 6);\r\n    ragdoll.addStick(0, 7);\r\n\r\n    // Body parts\r\n    // Hips\r\n    ragdoll.addStick(1, 2);\r\n    ragdoll.addStick(1, 3);\r\n    // Legs\r\n    ragdoll.addStick(2, 4);\r\n    ragdoll.addStick(3, 5);\r\n    ragdoll.addStick(4, 6);\r\n    ragdoll.addStick(5, 7);\r\n\r\n    ragdoll.addStick(0, 8);\r\n    ragdoll.addStick(8, 1);\r\n\r\n    // Left arm\r\n    ragdoll.addStick(8, 9);\r\n    ragdoll.addStick(9, 11);\r\n\r\n    // Right arm\r\n    ragdoll.addStick(8, 10);\r\n    ragdoll.addStick(10, 12);\r\n\r\n    this.addEntity(ragdoll);\r\n    return ragdoll;\r\n  }\r\n}\r\n\r\nexport default Verly;","/**\r\n * Vector.js v1.0.0\r\n * @author Anurag Hazra\r\n * @borrows p5.Vector\r\n * @param {number} x \r\n * @param {number} y \r\n */\r\n\r\nexport default function Vector(x, y) {\r\n  this.x = x || 0;\r\n  this.y = y || 0;\r\n}\r\n\r\n// Static Functions\r\nVector.dist = function (v1, v2) {\r\n  return v1.dist(v2);\r\n}\r\nVector.distSq = function (v1, v2) {\r\n  return v1.distSq(v2);\r\n}\r\nVector.sub = function (v1, v2) {\r\n  return new Vector(v1.x - v2.x, v1.y - v2.y);\r\n};\r\nVector.add = function (v1, v2) {\r\n  return new Vector(v1.x + v2.x, v1.y + v2.y);\r\n};\r\nVector.fromAngle = function (angle) {\r\n  let v = new Vector(0, 0);\r\n  v.x = Math.cos(angle);\r\n  v.y = Math.sin(angle);\r\n  return v;\r\n}\r\nVector.random2D = function (v) {\r\n  return Vector.fromAngle(Math.random() * Math.PI * 180);\r\n}\r\n\r\n\r\nVector.prototype = {\r\n  jitter: function (a, b) {\r\n    var v = new Vector(a, b);\r\n    this.x += normalizedRandom() * v.x;\r\n    this.y += normalizedRandom() * v.y;\r\n    return this;\r\n  },\r\n  add: function (x, y) {\r\n    if (arguments.length === 1) {\r\n      this.x += x.x;\r\n      this.y += x.y;\r\n    } else if (arguments.length === 2) {\r\n      this.x += x;\r\n      this.y += y;\r\n    }\r\n    return this;\r\n  },\r\n  sub: function (x, y) {\r\n    if (arguments.length === 1) {\r\n      this.x -= x.x;\r\n      this.y -= x.y;\r\n    } else if (arguments.length === 2) {\r\n      this.x -= x;\r\n      this.y -= y;\r\n    }\r\n    return this;\r\n  },\r\n  mult: function (v) {\r\n    if (typeof v === 'number') {\r\n      this.x *= v;\r\n      this.y *= v;\r\n    } else {\r\n      this.x *= v.x;\r\n      this.y *= v.y;\r\n    }\r\n    return this;\r\n  },\r\n  div: function (v) {\r\n    if (typeof v === 'number') {\r\n      this.x /= v;\r\n      this.y /= v;\r\n    } else {\r\n      this.x /= v.x;\r\n      this.y /= v.y;\r\n    }\r\n    return this;\r\n  },\r\n  setAngle: function (angle) {\r\n    var len = this.mag();\r\n    this.x = Math.cos(angle) * len;\r\n    this.y = Math.sin(angle) * len;\r\n  },\r\n  mag: function () {\r\n    return Math.sqrt(this.x * this.x + this.y * this.y);\r\n  },\r\n  magSq: function () {\r\n    return (this.x * this.x + this.y * this.y);\r\n  },\r\n  setXY: function (x, y) {\r\n    this.x = x;\r\n    this.y = y;\r\n    return this;\r\n  },\r\n  setMag: function (value) {\r\n    this.normalize();\r\n    this.mult(value);\r\n    return this;\r\n  },\r\n  normalize: function () {\r\n    let m = this.mag();\r\n    if (m > 0) {\r\n      this.div(m);\r\n    }\r\n    return this;\r\n  },\r\n  normalizeTo: function (length) {\r\n    var mag = this.mag();\r\n    if (mag > 0) {\r\n      mag = length / mag;\r\n      this.mult(mag);\r\n    }\r\n    return this;\r\n  },\r\n  limit: function (max) {\r\n    if (this.mag() > max) {\r\n      this.normalize();\r\n      this.mult(max);\r\n    }\r\n    return this;\r\n  },\r\n  heading: function () {\r\n    return (-Math.atan2(-this.y, this.x));\r\n  },\r\n  dist: function (v) {\r\n    let dx = this.x - v.x;\r\n    let dy = this.y - v.y;\r\n    return Math.sqrt(dx * dx + dy * dy);\r\n  },\r\n  distSq: function (v) {\r\n    let dx = this.x - v.x;\r\n    let dy = this.y - v.y;\r\n    return (dx * dx + dy * dy);\r\n  },\r\n  copy: function () {\r\n    return new Vector(this.x, this.y);\r\n  },\r\n  negative: function () {\r\n    this.x = -this.x;\r\n    this.y = -this.y;\r\n    return this;\r\n  },\r\n  array: function () {\r\n    return [this.x, this.y];\r\n  },\r\n  toString: function () {\r\n    return \"[\" + this.x + \", \" + this.y + \", \" + this.z + \"]\";\r\n  },\r\n  project: function (v) {\r\n    var coeff = ((this.x * v.x) + (this.y * v.y)) / ((v.x * v.x) + (v.y * v.y));\r\n    this.x = coeff * v.x;\r\n    this.y = coeff * v.y;\r\n    return this;\r\n  },\r\n  rotate: function (a) {\r\n    var b = this.heading() + a;\r\n    var c = this.mag();\r\n    this.x = Math.cos(b) * c;\r\n    this.y = Math.sin(b) * c;\r\n  }\r\n}","import Verly from './Verly';\r\nimport Utils from './Utils';\r\nimport Vector from './Vector';\r\nimport Point from './Point';\r\nimport Stick from './Stick';\r\nimport Entity from './Entity';\r\nimport TypoGraphy from './TypoGraphy';\r\n\r\nwindow.Verly = Verly;\r\nwindow.Vector = Vector;\r\nwindow.Point = Point;\r\nwindow.Stick = Stick;\r\nwindow.Entity = Entity;\r\nwindow.TypoGraphy = TypoGraphy;\r\n\r\nexport default Verly;","export default class Point {\r\n  constructor(x, y, vx, vy, radius) {\r\n    this.pos = new Vector(x, y);\r\n    this.oldpos = new Vector(x + (vx || 0), y + (vy || 0));\r\n    this.bounce = 0.99;\r\n    this.friction = 0.97;\r\n    this.groundFriction = 0.7;\r\n    this.gravity = new Vector(0, 1);\r\n    this.pinned = false;\r\n    this.radius = radius || 5;\r\n    this.color = '#e62a4f';\r\n    this.mass = 1;\r\n    this.sticks = [];\r\n    // this.behaviors = [];\r\n    this.forceAcc = 1;\r\n  }\r\n\r\n  setGravity(g) {\r\n    this.gravity = g;\r\n  }\r\n  setForceAcc(f) {\r\n    this.forceAcc = f;\r\n  }\r\n  setMass(m) {\r\n    this.mass = m;\r\n  }\r\n  setRadius(radius) {\r\n    this.radius = radius;\r\n  }\r\n\r\n  resetVelocity() {\r\n    this.oldpos.setXY(this.pos.x, this.pos.y);\r\n  }\r\n  pin() {\r\n    this.pinned = true;\r\n  }\r\n  unpin() {\r\n    this.pinned = false;\r\n  }\r\n\r\n  rotate(angle, offset) {\r\n    let x = offset.x + (this.pos.x - offset.x) * Math.cos(angle) - (this.pos.y - offset.y) * Math.sin(angle);\r\n    let y = offset.y + (this.pos.x - offset.x) * Math.sin(angle) + (this.pos.y - offset.y) * Math.cos(angle);\r\n    this.pos.setXY(x, y);\r\n  }\r\n\r\n  resolveBehaviors(p, radius, strength) {\r\n    var delta = Vector.sub(this.pos, p.pos);\r\n    var dist = delta.magSq();\r\n\r\n    let magR = (!radius) ? (this.radius * this.radius) : (radius * radius);\r\n    if (dist < magR) {\r\n      var f = delta.normalizeTo(1 - (dist / magR)).mult(strength || this.forceAcc);\r\n      this.applyForce(f);\r\n    }\r\n  }\r\n\r\n  applyForce(f) {\r\n    this.pos.add(f);\r\n  }\r\n\r\n  addMotor(x, y, time, radius, speed) {\r\n    this.pos.x = x + radius * Math.cos(time * speed);\r\n    this.pos.y = y + radius * Math.sin(time * speed);\r\n  }\r\n\r\n  constrain() {\r\n    // if (this.pos.y > HEIGHT - 1) {\r\n    //   this.pos.y = HEIGHT - 1;\r\n    // }\r\n    // if (this.pos.x < 0) {\r\n    //   this.pos.x = 0;\r\n    // }\r\n    // if (this.pos.x > WIDTH - 1) {\r\n    //   this.pos.x = WIDTH - 1;\r\n    // }\r\n    // let vel = Vector.sub(this.pos, this.oldpos);\r\n    if (this.pos.x > WIDTH - this.radius) {\r\n      this.pos.x = WIDTH - this.radius;\r\n      // this.oldpos.x = (this.pos.x + vel.x) * this.bounce;\r\n    }\r\n    if (this.pos.x < this.radius) {\r\n      this.pos.x = this.radius;\r\n      // this.oldpos.x = (this.pos.x + vel.x) * this.bounce;\r\n    }\r\n    if (this.pos.y > HEIGHT - this.radius) {\r\n      this.pos.y = HEIGHT - this.radius;\r\n      // this.oldpos.y = (this.pos.y + vel.y) * this.bounce;\r\n    }\r\n    if (this.pos.y < this.radius) {\r\n      this.pos.y = this.radius;\r\n      // this.oldpos.y = (this.pos.y + vel.y) * this.bounce;\r\n    }\r\n  };\r\n\r\n\r\n  update() {\r\n    if (this.pinned) return;\r\n    let vel = Vector.sub(this.pos, this.oldpos);\r\n    vel.mult(this.friction);\r\n    // if the point touches the ground set groundFriction\r\n    if (this.pos.y >= HEIGHT - this.radius && vel.magSq() > 0.000001) {\r\n      var m = vel.mag();\r\n      vel.x /= m;\r\n      vel.y /= m;\r\n      vel.mult(m * this.groundFriction);\r\n    }\r\n    this.oldpos.setXY(this.pos.x, this.pos.y);\r\n    this.pos.add(vel);\r\n    this.pos.add(this.gravity);\r\n  }\r\n\r\n  render() {\r\n    ctx.beginPath();\r\n    ctx.fillStyle = this.color;\r\n    ctx.arc(this.pos.x, this.pos.y, this.radius, 0, Math.PI * 2);\r\n    ctx.fill();\r\n    ctx.closePath();\r\n  }\r\n}\r\n","export default class Stick {\r\n  constructor(p1, p2, length, stiffness) {\r\n    this.startPoint = p1;\r\n    this.endPoint = p2;\r\n    this.stiffness = stiffness || 2;\r\n    this.color = '#f5476a';\r\n    if (!length) {\r\n      this.length = this.startPoint.pos.dist(this.endPoint.pos);\r\n    } else {\r\n      this.length = length;\r\n    }\r\n    this.startPoint.sticks.push(this);\r\n    this.endPoint.sticks.push(this);\r\n  }\r\n\r\n  update(stepCoef) {\r\n    // not gonna use vectors for performance optimization\r\n    // let dx = this.endPoint.pos.x - this.startPoint.pos.x;\r\n    // let dy = this.endPoint.pos.y - this.startPoint.pos.y;\r\n    // let dist = Math.sqrt(dx * dx + dy * dy);\r\n    // let diff = this.length - dist;\r\n    // let percent = diff / dist / 2;\r\n    // let offsetx = (dx * percent);\r\n    // let offsety = (dy * percent);\r\n    // if (!this.startPoint.pinned) {\r\n    //   this.startPoint.pos.x -= offsetx;\r\n    //   this.startPoint.pos.y -= offsety;\r\n    // }\r\n    // if (!this.endPoint.pinned) {\r\n    //   this.endPoint.pos.x += offsetx;\r\n    //   this.endPoint.pos.y += offsety;\r\n    // }\r\n    // ----- algo two\r\n\r\n    // algo three\r\n    let dx = this.endPoint.pos.x - this.startPoint.pos.x;\r\n    let dy = this.endPoint.pos.y - this.startPoint.pos.y;\r\n    let dist = Math.sqrt(dx * dx + dy * dy);\r\n    let diff = (this.length - dist) / dist * this.stiffness;\r\n\r\n    let offsetx = dx * diff * 0.5;\r\n    let offsety = dy * diff * 0.5;\r\n\r\n    // calculate mass\r\n    let m1 = this.startPoint.mass + this.endPoint.mass;\r\n    let m2 = this.startPoint.mass / m1;\r\n    m1 = this.endPoint.mass / m1;\r\n\r\n    if (!this.startPoint.pinned) {\r\n      this.startPoint.pos.x -= offsetx * m1;\r\n      this.startPoint.pos.y -= offsety * m1;\r\n    }\r\n    if (!this.endPoint.pinned) {\r\n      this.endPoint.pos.x += offsetx * m2;\r\n      this.endPoint.pos.y += offsety * m2;\r\n    }\r\n\r\n    \r\n    // calculate mass\r\n    // var m1 = this.startPoint.mass + this.endPoint.mass;\r\n    // var m2 = this.startPoint.mass / m1;\r\n    // m1 = this.endPoint.mass / m1;\r\n    \r\n    // var normal = Vector.sub(this.startPoint.pos, this.endPoint.pos);\r\n    // var m = normal.magSq();\r\n    // let diff = ((this.length * this.length) - m);\r\n    // normal.mult((diff / m) * this.stiffness * stepCoef);\r\n    \r\n    // if (!this.startPoint.pinned) {\r\n    //   this.startPoint.pos.add(normal);\r\n    // }\r\n    // if (!this.endPoint.pinned) {\r\n    //   this.endPoint.pos.sub(normal);\r\n    // }\r\n  }\r\n\r\n  render() {\r\n    ctx.beginPath();\r\n    ctx.strokeStyle = this.color;\r\n    ctx.moveTo(this.startPoint.pos.x, this.startPoint.pos.y);\r\n    ctx.lineTo(this.endPoint.pos.x, this.endPoint.pos.y);\r\n    ctx.stroke();\r\n    ctx.closePath();\r\n  }\r\n}\r\n","/**\r\n * @class Entity\r\n */\r\nexport default class Entity {\r\n  /**\r\n   * \r\n   * @param {Number} iterations \r\n   */\r\n  constructor(iterations) {\r\n    this.points = [];\r\n    this.sticks = [];\r\n    this.iterations = iterations || 16;\r\n  }\r\n\r\n\r\n  // join(...args) {\r\n  //   let points = [];\r\n  //   let sticks = [];\r\n\r\n  //   // loop through the args and push points and sticks to the array\r\n  //   for (let i = 0; i < args.length; i++) {\r\n  //     points.push(args[i].points);\r\n  //     sticks.push(args[i].sticks);\r\n  //   }\r\n\r\n  //   // join multiple arrays\r\n  //   points = [].concat.apply([], points);\r\n  //   sticks = [].concat.apply([], sticks);\r\n\r\n  //   // add the arrays to the mix::Entity\r\n  //   this.points = points;\r\n  //   this.sticks = sticks;\r\n\r\n  //   return this; // return for chaining\r\n  // }\r\n\r\n  /**\r\n   * @method setGravity\r\n   * @param {Vector} g \r\n   */\r\n  setGravity(g) {\r\n    for (let i = 0; i < this.points.length; i++) {\r\n      this.points[i].setGravity(g);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method pin\r\n   * @param {Number} index \r\n   */\r\n  pin(index) {\r\n    this.points[index].pin();\r\n  }\r\n\r\n  /**\r\n   * @method removeSticks\r\n   * @param {Point} p\r\n   */\r\n  removeSticks(p) {\r\n    this.sticks.splice(this.sticks.indexOf(p.sticks[0]), 1);\r\n    p.sticks.splice(0, 1);\r\n  }\r\n  \r\n  /**\r\n   * @method setVelocity\r\n   * @param {Number} x \r\n   * @param {Number} y \r\n   */\r\n  setVelocity(x, y) {\r\n    this.points.map(e => {\r\n      e.oldpos.x += x;\r\n      e.oldpos.y += y;\r\n    })\r\n  }\r\n\r\n  /**\r\n   * @ethod addPoint\r\n   * @param {Number|Point} x \r\n   * @param {Number?} y \r\n   * @param {Number?} vx \r\n   * @param {Number?} vy \r\n   * @param {Number?} radius \r\n   * @description adds a Point in points array with {x,y,vx,vy,radius}\r\n   */\r\n  addPoint(x, y, vx, vy, radius) {\r\n    let p\r\n    if (x instanceof Point) {\r\n      p = x;\r\n    } else {\r\n      p = new Point(x, y, vx, vy, radius);\r\n    }\r\n    this.points.push(p);\r\n    return p;\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {Number|Stick} p1 \r\n   * @param {Number} p2 \r\n   * @param {Number} length \r\n   */\r\n  addStick(p1, p2, length) {\r\n    // let s;\r\n    // return s;\r\n    if (p1 instanceof Stick) {\r\n      this.sticks.push(p1);\r\n    } else {\r\n      this.sticks.push(new Stick(this.points[p1], this.points[p2], length));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method updatePoints\r\n   */\r\n  updatePoints() {\r\n    for (let i = 0; i < this.points.length; i++) {\r\n      this.points[i].update();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @methdo updateSticks\r\n   * @param {Number} stepCoef \r\n   */\r\n  updateSticks(stepCoef) {\r\n    for (let i = 0; i < this.sticks.length; i++) {\r\n      this.sticks[i].update(stepCoef);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method renderPoints\r\n   */\r\n  renderPoints() {\r\n    for (let i = 0; i < this.points.length; i++) {\r\n      this.points[i].render();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method updateContrains\r\n   */\r\n  updateContrains() {\r\n    for (let i = 0; i < this.points.length; i++) {\r\n      this.points[i].constrain();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method renderSticks\r\n   */\r\n  renderSticks() {\r\n    for (let i = 0; i < this.sticks.length; i++) {\r\n      this.sticks[i].render();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method renderPointsIndex\r\n   */\r\n  renderPointsIndex() {\r\n    for (let i = 0; i < this.points.length; i++) {\r\n      ctx.beginPath();\r\n      ctx.fillStyle = 'black';\r\n      ctx.fillText(i, this.points[i].pos.x + 5, this.points[i].pos.y - 6);\r\n      ctx.closePath();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method update\r\n   */\r\n  update() {\r\n    // var stepCoef = 1 / this.iterations;\r\n    this.updatePoints();\r\n    for (let j = 0; j < this.iterations; ++j) {\r\n      this.updateSticks();\r\n      this.updateContrains();\r\n    }\r\n  }\r\n  /**\r\n   * @method render\r\n   */\r\n  render() {\r\n    this.renderPoints();\r\n    this.renderSticks();\r\n  }\r\n}","export default class TypoGraphy {\r\n  constructor(x, y, size, letter) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.size = size;\r\n    this.stickDistance = this.size;\r\n    this.iterations = 50;\r\n    // A\r\n    this.A = [\r\n      [0, 0, 1, 0, 0],\r\n      [0, 1, 1, 1, 0],\r\n      [0, 1, 0, 1, 0],\r\n      [1, 1, 1, 1, 1],\r\n      [1, 0, 0, 0, 1]\r\n    ]\r\n    // B\r\n    this.B = [\r\n      [1, 1, 1, 0, 0],\r\n      [1, 1, 1, 1, 0],\r\n      [1, 1, 1, 0, 0],\r\n      [1, 1, 1, 1, 0],\r\n      [1, 1, 1, 0, 0]\r\n    ]\r\n\r\n    // C\r\n    this.C = [\r\n      [1, 1, 1, 1, 0],\r\n      [1, 1, 1, 1, 0],\r\n      [1, 1, 0, 0, 0],\r\n      [1, 1, 1, 1, 0],\r\n      [1, 1, 1, 1, 0]\r\n    ]\r\n\r\n    // D\r\n    this.D = [\r\n      [1, 1, 1, 0, 0],\r\n      [1, 1, 1, 1, 0],\r\n      [1, 1, 1, 1, 0],\r\n      [1, 1, 1, 1, 0],\r\n      [1, 1, 1, 0, 0]\r\n    ];\r\n\r\n    // E\r\n    this.E = [\r\n      [0, 1, 1, 1, 0],\r\n      [0, 1, 1, 0, 0],\r\n      [0, 1, 1, 1, 0],\r\n      [0, 1, 1, 0, 0],\r\n      [0, 1, 1, 1, 0]\r\n    ]\r\n\r\n    // S\r\n    this.S = [\r\n      [0, 1, 1, 1, 0],\r\n      [1, 1, 1, 0, 0],\r\n      [1, 1, 1, 1, 0],\r\n      [0, 1, 1, 1, 0],\r\n      [1, 1, 1, 0, 0]\r\n    ]\r\n\r\n    // I \r\n    this.I = [\r\n      [0, 0, 1, 0, 0],\r\n      [0, 1, 1, 1, 0],\r\n      [0, 1, 1, 1, 0],\r\n      [0, 1, 1, 1, 0],\r\n      [0, 1, 1, 1, 0]\r\n    ]\r\n\r\n\r\n    // K\r\n    this.K = [\r\n      [1, 0, 1, 1, 0],\r\n      [1, 1, 1, 0, 0],\r\n      [1, 1, 0, 0, 0],\r\n      [1, 1, 1, 0, 0],\r\n      [1, 0, 1, 1, 0]\r\n    ]\r\n\r\n    // U\r\n    this.U = [\r\n      [1, 1, 0, 1, 1],\r\n      [1, 1, 0, 1, 1],\r\n      [1, 1, 0, 1, 1],\r\n      [1, 1, 1, 1, 1],\r\n      [0, 1, 1, 1, 0]\r\n    ]\r\n\r\n    // N\r\n    this.N = [\r\n      [0, 0, 0, 0, 0, 0],\r\n      [1, 1, 0, 0, 1, 1],\r\n      [1, 1, 1, 0, 1, 1],\r\n      [1, 1, 1, 1, 1, 1],\r\n      [1, 1, 0, 1, 1, 1],\r\n      [1, 1, 0, 0, 1, 1]\r\n    ]\r\n\r\n    // R\r\n    this.R = [\r\n      [1, 1, 1, 0, 0],\r\n      [1, 1, 1, 1, 0],\r\n      [1, 1, 1, 1, 0],\r\n      [1, 1, 1, 0, 0],\r\n      [1, 1, 1, 1, 0]\r\n    ]\r\n\r\n    // G\r\n    this.G = [\r\n      [0, 1, 1, 1, 0],\r\n      [1, 1, 1, 0, 0],\r\n      [1, 1, 0, 1, 1],\r\n      [1, 1, 1, 1, 1],\r\n      [0, 1, 1, 1, 0]\r\n    ]\r\n\r\n    // L\r\n    this.L = [\r\n      [1, 1, 0, 0, 0],\r\n      [1, 1, 0, 0, 0],\r\n      [1, 1, 0, 0, 0],\r\n      [1, 1, 1, 1, 1],\r\n      [1, 1, 1, 1, 1]\r\n    ]\r\n\r\n    // Y\r\n    this.Y = [\r\n      [1, 1, 0, 1, 1],\r\n      [1, 1, 0, 1, 1],\r\n      [0, 1, 1, 1, 0],\r\n      [0, 1, 1, 1, 0],\r\n      [0, 1, 1, 1, 0]\r\n    ]\r\n\r\n    // V\r\n    this.V = [\r\n      [1, 0, 0, 0, 1],\r\n      [1, 1, 0, 1, 1],\r\n      [1, 1, 0, 1, 1],\r\n      [1, 1, 1, 1, 1],\r\n      [0, 1, 1, 1, 0]\r\n    ]\r\n\r\n    //X\r\n    this.X = [\r\n      [1, 1, 1, 1, 1],\r\n      [1, 1, 1, 1, 1],\r\n      [1, 1, 1, 1, 1],\r\n      [1, 1, 1, 1, 1],\r\n      [1, 1, 1, 1, 1]\r\n    ]\r\n\r\n    //P\r\n    this.P = [\r\n      [1, 1, 1, 0, 0],\r\n      [1, 1, 1, 1, 0],\r\n      [1, 1, 1, 1, 0],\r\n      [1, 1, 1, 0, 0],\r\n      [1, 1, 1, 0, 0]\r\n    ]\r\n\r\n    //H\r\n    this.H = [\r\n      [1, 1, 0, 1, 1],\r\n      [1, 1, 0, 1, 1],\r\n      [1, 1, 1, 1, 1],\r\n      [1, 1, 0, 1, 1],\r\n      [1, 1, 0, 1, 1]\r\n    ]\r\n\r\n    //O\r\n    this.O = [\r\n      [0, 1, 1, 1, 0],\r\n      [1, 1, 0, 1, 1],\r\n      [1, 1, 0, 1, 1],\r\n      [1, 1, 0, 1, 1],\r\n      [0, 1, 1, 1, 0]\r\n    ]\r\n\r\n    this.letters = {\r\n      A: this.A,\r\n      B: this.B,\r\n      C: this.C,\r\n      D: this.D,\r\n      E: this.E,\r\n      K: this.K,\r\n      I: this.I,\r\n      S: this.S,\r\n      U: this.U,\r\n      N: this.N,\r\n      R: this.R,\r\n      G: this.G,\r\n      L: this.L,\r\n      Y: this.Y,\r\n      V: this.V,\r\n      X: this.X,\r\n      P: this.P,\r\n      H: this.H,\r\n      O: this.O,\r\n    }\r\n\r\n\r\n    let gridArray = this.letters[letter];\r\n\r\n    this.text = new Entity(this.iterations);\r\n    // this.text.renderPoints = function() {};\r\n\r\n    for (let x = 0; x < gridArray.length; x++) {\r\n      for (let y = 0; y < gridArray[x].length; y++) {\r\n        if (gridArray[y][x] == 1) {\r\n          let p = new Point(this.x + x * this.size, this.y + y * this.size);\r\n          p.setRadius(2);\r\n          this.text.addPoint(p);\r\n        }\r\n      }\r\n    }\r\n\r\n    // join\r\n    for (let i = 0; i < this.text.points.length; i++) {\r\n      for (let j = 0; j < this.text.points.length; j++) {\r\n        if (this.text.points[i] == this.text.points[j]) break;\r\n        let d = this.text.points[i].pos.dist(this.text.points[j].pos);\r\n\r\n        if (d > 0 && d < this.size + this.stickDistance) {\r\n          this.text.addStick(i, j);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"],"sourceRoot":""}