{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/Utils.js","webpack:///./src/Mouse.js","webpack:///./src/Verly.js","webpack:///./src/Vector.js","webpack:///./src/Point.js","webpack:///./src/Stick.js","webpack:///./src/Entity.js","webpack:///./src/TypoGraphy.js","webpack:///./src/app.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","window","normalizedRandom","Math","random","degreesToRad","degrees","PI","clamp","min","max","rand","arguments","length","lerp","a","b","Mouse","[object Object]","entities","canvas","ctx","this","draggedPoint","down","coord","Vector","offset","offsetCoord","addEventListener","e","setXY","offsetX","pos","x","offsetY","y","sub","resetVelocity","touches","clientX","clientY","pageX","pageY","getNearestPoint","renderDraggedPoint","dragPoint","point","beginPath","strokeStyle","arc","radius","stroke","closePath","k","points","dist","src_Verly","iterations","currentFrame","WIDTH","width","HEIGHT","height","mouse","args","mixEntity","Entity","sticks","push","index","indexOf","splice","concat","apply","addEntity","drag","update","renderPointIndex","render","w","h","box","addPoint","addStick","segments","stride1","stride2","hexagon","stride","theta","cos","sin","center","Stick","posx","posy","pinOffset","cloth","xStride","yStride","px","py","tear","threshold","startPoint","endPoint","removeSticks","pin","dontPush","gap","rope","undefined","x0","y0","ragdoll","head","Point","setMass","f1","f2","h1","h2","Vector_Vector","v1","v2","distSq","angle","v","fromAngle","len","mag","sqrt","normalize","mult","div","atan2","dx","dy","z","coeff","heading","src_Vector","src_Point","vx","vy","oldpos","bounce","friction","groundFriction","gravity","pinned","color","mass","forceAcc","g","f","strength","delta","magSq","magR","normalizeTo","applyForce","add","time","speed","verlyInstance","vel","fillStyle","fill","src_Stick","p1","p2","stiffness","stepCoef","diff","offsetx","offsety","m1","m2","moveTo","lineTo","src_Entity","setGravity","setFriction","map","constrain","updatePoints","j","updateSticks","updateConstraints","fillText","renderPoints","renderSticks","src_TypoGraphy","size","letter","stickDistance","A","B","C","D","E","S","I","K","U","N","R","G","L","Y","V","X","P","H","O","letters","gridArray","text","setRadius","Verly","TypoGraphy","__webpack_exports__"],"mappings":"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AAA,CACA,YACA,YACA,YACA,YACA,aAIAlL,KAAAmL,EAAA,CACA,YACA,YACA,YACA,YACA,aAIAnL,KAAAoL,EAAA,CACA,YACA,YACA,YACA,YACA,aAIApL,KAAAqL,EAAA,CACA,YACA,YACA,YACA,YACA,aAIArL,KAAAsL,EAAA,CACA,YACA,YACA,YACA,YACA,aAKAtL,KAAAuL,EAAA,CACA,YACA,YACA,YACA,YACA,aAIAvL,KAAAwL,EAAA,CACA,YACA,YACA,YACA,YACA,aAIAxL,KAAAyL,EAAA,CACA,cACA,cACA,cACA,cACA,cACA,eAIAzL,KAAA0L,EAAA,CACA,YACA,YACA,YACA,YACA,aAIA1L,KAAA2L,EAAA,CACA,YACA,YACA,YACA,YACA,aAIA3L,KAAA4L,EAAA,CACA,YACA,YACA,YACA,YACA,aAIA5L,KAAA6L,EAAA,CACA,YACA,YACA,YACA,YACA,aAIA7L,KAAA8L,EAAA,CACA,YACA,YACA,YACA,YACA,aAIA9L,KAAA+L,EAAA,CACA,YACA,YACA,YACA,YACA,aAIA/L,KAAAgM,EAAA,CACA,YACA,YACA,YACA,YACA,aAIAhM,KAAAiM,EAAA,CACA,YACA,YACA,YACA,YACA,aAIAjM,KAAAkM,EAAA,CACA,YACA,YACA,YACA,YACA,aAGAlM,KAAAmM,QAAA,CACAnB,EAAAhL,KAAAgL,EACAC,EAAAjL,KAAAiL,EACAC,EAAAlL,KAAAkL,EACAC,EAAAnL,KAAAmL,EACAC,EAAApL,KAAAoL,EACAG,EAAAvL,KAAAuL,EACAD,EAAAtL,KAAAsL,EACAD,EAAArL,KAAAqL,EACAG,EAAAxL,KAAAwL,EACAC,EAAAzL,KAAAyL,EACAC,EAAA1L,KAAA0L,EACAC,EAAA3L,KAAA2L,EACAC,EAAA5L,KAAA4L,EACAC,EAAA7L,KAAA6L,EACAC,EAAA9L,KAAA8L,EACAC,EAAA/L,KAAA+L,EACAC,EAAAhM,KAAAgM,EACAC,EAAAjM,KAAAiM,EACAC,EAAAlM,KAAAkM,GAIA,IAAAE,EAAApM,KAAAmM,QAAArB,GAEA9K,KAAAqM,KAAA,IAAAxJ,OAAA7C,KAAAoC,WAAA4G,GAGA,QAAApI,EAAA,EAAmBA,EAAAwL,EAAA7M,OAAsBqB,IACzC,QAAAE,EAAA,EAAqBA,EAAAsL,EAAAxL,GAAArB,OAAyBuB,IAC9C,MAAAsL,EAAAtL,GAAAF,GAAA,CACA,IAAAnC,EAAA,IAAAsH,MAAA/F,KAAAY,IAAAZ,KAAA6K,KAAA7K,KAAAc,IAAAd,KAAA6K,MACApM,EAAA6N,UAAA,GACAtM,KAAAqM,KAAAxI,SAAApF,GAMA,QAAA9B,EAAA,EAAmBA,EAAAqD,KAAAqM,KAAApK,OAAA1C,OAA6B5C,IAChD,QAAA2N,EAAA,EAAqBA,EAAAtK,KAAAqM,KAAApK,OAAA1C,QACrBS,KAAAqM,KAAApK,OAAAtF,IAAAqD,KAAAqM,KAAApK,OAAAqI,GADkDA,IAAA,CAElD,IAAArN,EAAA+C,KAAAqM,KAAApK,OAAAtF,GAAAgE,IAAAuB,KAAAlC,KAAAqM,KAAApK,OAAAqI,GAAA3J,KAEA1D,EAAA,GAAAA,EAAA+C,KAAA6K,KAAA7K,KAAA+K,eACA/K,KAAAqM,KAAAvI,SAAAnH,EAAA2N,MChOA3L,OAAA4N,MAAepK,EACfxD,OAAAyB,OAAgBoH,EAChB7I,OAAAoH,MAAe0B,EACf9I,OAAA6F,MAAe4E,EACfzK,OAAAkE,OAAgBmH,EAChBrL,OAAA6N,WAAoB5B,EAEL6B,EAAA","file":"verly.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","/**\r\n * @method normalizedRandom\r\n */\r\nwindow.normalizedRandom = function () {\r\n  return Math.random() * 2 - 1;\r\n};\r\n/**\r\n * @method degreesToRad\r\n * @param {number} degrees\r\n */\r\nwindow.degreesToRad = function (degrees) {\r\n  var pi = Math.PI;\r\n  return degrees * (pi / 180);\r\n}\r\n/**\r\n * @method clamp\r\n * @param {number} value\r\n * @param {number} min\r\n * @param {number} max\r\n */\r\nwindow.clamp = function (value, min, max) {\r\n  return Math.min(Math.max(value, Math.min(min, max), Math.max(min, max)))\r\n}\r\n/**\r\n * @method random\r\n */\r\nwindow.random = function (rand, min, max) {\r\n  //one param\r\n  if (arguments.length === 1) {\r\n    return Math.random() * arguments[0];\r\n  } else if (arguments.length == 2) {\r\n    //min and max\r\n    max = min;\r\n    min = rand;\r\n    rand = Math.random;\r\n  }\r\n  if (!min && !max) {\r\n    return Math.random();\r\n  } else if (!max) {\r\n    //if only one is provided, then thats actually the max\r\n    max = min;\r\n    return rand() * max;\r\n  }\r\n  return rand() * (max - min) + min;\r\n};\r\n/**\r\n * @method lerp\r\n * @param {number} a\r\n * @param {number} b\r\n * @param {number} p\r\n */\r\nwindow.lerp = function (a, b, p) {\r\n  return (b - a) * p + a;\r\n}\r\n","export default class Mouse {\r\n  constructor(entities, canvas, ctx) {\r\n    this.entities = entities;\r\n    // Drag Interaction\r\n    this.draggedPoint = null;\r\n    this.down = false;\r\n    this.coord = new Vector();\r\n    this.offset = new Vector();\r\n    this.offsetCoord = new Vector();\r\n    this.canvas = canvas;\r\n    this.ctx = ctx;\r\n\r\n    this.canvas.addEventListener('mousedown', (e) => {\r\n      this.down = true;\r\n      if (this.draggedPoint) {\r\n        this.offset.setXY(e.offsetX - this.draggedPoint.pos.x, e.offsetY - this.draggedPoint.pos.y);\r\n        this.offsetCoord = Vector.sub(this.coord, this.offset);\r\n      }\r\n    })\r\n    this.canvas.addEventListener('mouseup', (e) => {\r\n      if (this.draggedPoint) {\r\n        this.draggedPoint.resetVelocity();\r\n      };\r\n      this.down = false;\r\n      this.draggedPoint = null;\r\n    })\r\n\r\n    this.canvas.addEventListener('mousemove', (e) => {\r\n      this.coord.setXY(e.offsetX, e.offsetY);\r\n      this.offsetCoord = Vector.sub(this.coord, this.offset);\r\n    })\r\n\r\n    // TOUCH\r\n    this.canvas.addEventListener('touchstart', (e) => {\r\n      let offset = e.touches[0];\r\n      this.down = true;\r\n      if (this.draggedPoint) {\r\n        this.offset.setXY(offset.clientX - this.draggedPoint.pos.x, offset.clientY - this.draggedPoint.pos.y);\r\n        this.offsetCoord = Vector.sub(this.coord, this.offset);\r\n      }\r\n    })\r\n    this.canvas.addEventListener('touchend', (e) => {\r\n      if (this.draggedPoint) {\r\n        this.draggedPoint.resetVelocity();\r\n      };\r\n      this.down = false;\r\n      this.draggedPoint = null;\r\n    })\r\n    this.canvas.addEventListener('touchmove', (e) => {\r\n      let offset = e.touches[0];\r\n      this.coord.setXY(offset.pageX, offset.pageY);\r\n      this.offsetCoord = Vector.sub(this.coord, this.offset);\r\n    })\r\n  }\r\n\r\n  dragPoint() {\r\n    if (!this.down) return;\r\n    this.draggedPoint.pos.setXY(this.offsetCoord.x, this.offsetCoord.y);\r\n  }\r\n\r\n  drag() {\r\n    if (!this.down) {\r\n      this.draggedPoint = this.getNearestPoint();\r\n    }\r\n    if (this.draggedPoint) {\r\n      this.renderDraggedPoint(this.draggedPoint);\r\n      this.dragPoint();\r\n    }\r\n  }\r\n  \r\n  renderDraggedPoint(point) {\r\n    this.ctx.beginPath();\r\n    this.ctx.strokeStyle = 'black';\r\n    this.ctx.arc(point.pos.x, point.pos.y, point.radius * 1.5, 0, Math.PI * 2);\r\n    this.ctx.stroke();\r\n    this.ctx.closePath();\r\n  }\r\n\r\n\r\n  getNearestPoint() {\r\n    // if (!this.down) return false;\r\n    let d = 20;\r\n    let p = null;\r\n    for (let k = 0; k < this.entities.length; k++) {\r\n      for (let i = 0; i < this.entities[k].points.length; i++) {\r\n        let dist = this.entities[k].points[i].pos.dist(this.coord);\r\n        if (dist < d) {\r\n          p = this.entities[k].points[i];\r\n        }\r\n      }\r\n    }\r\n    return p;\r\n  }\r\n}\r\n","import Mouse from './Mouse';\r\n\r\n/**\r\n * @class Verly\r\n * @version 1.1.4\r\n * @author <hazru.anurag@gmail.com>\r\n */\r\nclass Verly {\r\n  /**\r\n   * \r\n   * @param {Number} iterations \r\n   * @param {HTMLCanvasElement} canvas \r\n   * @param {CanvasRenderingContext2D} ctx \r\n   */\r\n  constructor(iterations, canvas, ctx) {\r\n    this.entities = [];\r\n    this.iterations = iterations;\r\n    this.currentFrame = 0;\r\n    this.canvas = canvas;\r\n    this.WIDTH = canvas.width;\r\n    this.HEIGHT = canvas.height;\r\n    this.ctx = ctx;\r\n    this.mouse = new Mouse(this.entities, this.canvas, this.ctx);\r\n  }\r\n\r\n  /**\r\n   * @param  {...Entity} args\r\n   * @description Joins two Entity Class Together \r\n   * \r\n   * @example\r\n   * let canvas = document.getElementById('c');\r\n   * let ctx = canvas.getContext('2d');\r\n   * let width = canvas.width = 600;\r\n   * let height = canvas.height = 500;\r\n   * \r\n   * let verly = new Verly(16, canvas, ctx);\r\n   * let box = verly.createBox(100, 100, 100, 100);\r\n   * let rope = verly.createRope(100, 100, 15, 10, 0);\r\n   * \r\n   * // verly.joinEntities(...Entity)\r\n   * let mix = verly.joinEntities(box, rope);\r\n   * mix.addStick(0, 18, 20)\r\n   * \r\n   * function animate() {\r\n   *  ctx.clearRect(0, 0, width, height);\r\n   * \r\n   *  verly.update();\r\n   *  verly.render();\r\n   *  verly.interact();\r\n   *  verly.renderPointIndex();\r\n   * \r\n   *  requestAnimationFrame(animate);\r\n   * }\r\n   * animate();\r\n   * \r\n   */\r\n  joinEntities(...args) {\r\n    let mixEntity = new Entity(this.iterations, this);\r\n\r\n    let points = [];\r\n    let sticks = [];\r\n\r\n    // loop through the args and push points and sticks to the array\r\n    for (let i = 0; i < args.length; i++) {\r\n      points.push(args[i].points);\r\n      sticks.push(args[i].sticks);\r\n\r\n      // get the index which item we should splice in [this.entities]\r\n      let index = this.entities.indexOf(args[i]);\r\n      this.entities.splice(index, 1);\r\n    }\r\n\r\n    // join multiple arrays\r\n    points = [].concat.apply([], points);\r\n    sticks = [].concat.apply([], sticks);\r\n\r\n    // add the arrays to the mix::Entity\r\n    mixEntity.points = points;\r\n    mixEntity.sticks = sticks;\r\n\r\n    // add the mix::Entity to [this.entities]\r\n    this.addEntity(mixEntity);\r\n    return mixEntity; // return for chaining\r\n  }\r\n\r\n  /**\r\n   * @param {Entity} e \r\n   */\r\n  addEntity(e) {\r\n    this.entities.push(e);\r\n  }\r\n\r\n  /**\r\n   * drags points\r\n   */\r\n  interact() {\r\n    this.mouse.drag();\r\n  }\r\n\r\n  /**\r\n   * updates all the physics stuff\r\n   */\r\n  update() {\r\n    for (let i = 0; i < this.entities.length; i++) {\r\n      this.entities[i].update();\r\n    }\r\n\r\n    this.currentFrame++;\r\n  }\r\n\r\n  /**\r\n   */\r\n  renderPointIndex() {\r\n    for (let i = 0; i < this.entities.length; i++) {\r\n      this.entities[i].renderPointIndex(this.ctx);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * renders all the entity\r\n   */\r\n  render() {\r\n    for (let i = 0; i < this.entities.length; i++) {\r\n      this.entities[i].render(this.ctx);\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n  /**\r\n   * @param {number} x \r\n   * @param {number} y \r\n   * @param {number} w \r\n   * @param {number} h \r\n   */\r\n  createBox(x, y, w, h) {\r\n    const box = new Entity(this.iterations, this);\r\n    box.addPoint(x, y, 0, 0);\r\n    box.addPoint(x + w, y, 0, 0);\r\n    box.addPoint(x + w, y + h, 0, 0);\r\n    box.addPoint(x, y + h, 0, 0);\r\n    box.addStick(0, 1);\r\n    box.addStick(1, 2);\r\n    box.addStick(2, 3);\r\n    box.addStick(3, 0);\r\n    box.addStick(3, 1);\r\n\r\n    this.addEntity(box);\r\n    return box;\r\n  }\r\n\r\n\r\n  /**\r\n   * @param {number} x \r\n   * @param {number} y \r\n   * @param {number} segments \r\n   * @param {number} radius=50\r\n   * @param {number} stride1=1\r\n   * @param {number} stride2=5\r\n   */\r\n  createHexagon(x, y, segments, radius = 50, stride1 = 1, stride2 = 5) {\r\n    const hexagon = new Entity(this.iterations, this);\r\n\r\n    let stride = (2 * Math.PI) / segments;\r\n\r\n    // points\r\n    for (let i = 0; i < segments; ++i) {\r\n      let theta = i * stride;\r\n      hexagon.addPoint(\r\n        x + Math.cos(theta) * radius,\r\n        y + Math.sin(theta) * radius,\r\n        0, 0\r\n      );\r\n    }\r\n\r\n    let center = hexagon.addPoint(x, y, 0, 0);\r\n\r\n    // sticks\r\n    for (let i = 0; i < segments; ++i) {\r\n      hexagon.addStick(i, (i + stride1) % segments);\r\n      hexagon.addStick(new Stick(hexagon.points[i], center));\r\n      hexagon.addStick(i, (i + stride2) % segments);\r\n    }\r\n\r\n\r\n    this.addEntity(hexagon);\r\n    return hexagon;\r\n  }\r\n\r\n  /**\r\n   * @param {number} posx \r\n   * @param {number} posy \r\n   * @param {number} w \r\n   * @param {number} h \r\n   * @param {number} segments \r\n   * @param {number} pinOffset \r\n   */\r\n  createCloth(posx, posy, w, h, segments, pinOffset) {\r\n    let cloth = new Entity(this.iterations, this);\r\n\r\n    let xStride = w / segments;\r\n    let yStride = h / segments;\r\n\r\n    let x, y;\r\n    for (y = 0; y < segments; ++y) {\r\n      for (x = 0; x < segments; ++x) {\r\n        let px = posx + x * xStride - w / 2 + xStride / 2;\r\n        let py = posy + y * yStride - h / 2 + yStride / 2;\r\n        cloth.addPoint(px, py);\r\n\r\n        if (x > 0) {\r\n          cloth.addStick(y * segments + x, y * segments + x - 1);\r\n        }\r\n\r\n        if (y > 0) {\r\n          cloth.addStick(y * segments + x, (y - 1) * segments + x);\r\n        }\r\n      }\r\n    }\r\n\r\n    // as the name suggest\r\n    function tear(threshold) {\r\n      for (let i = 0; i < cloth.sticks.length; i++) {\r\n        // find the distance between two points\r\n        let dist = cloth.sticks[i].startPoint.pos.dist(cloth.sticks[i].endPoint.pos)\r\n        if (dist > (threshold || 20)) { // remove if the dist is > than threshold \r\n          cloth.removeSticks(cloth.sticks[i].startPoint);\r\n        }\r\n      }\r\n    }\r\n\r\n    cloth.tear = tear;\r\n\r\n    for (x = 0; x < segments; ++x) {\r\n      if (x % pinOffset == 0) { // magic\r\n        cloth.pin(x);\r\n      }\r\n    }\r\n\r\n    !this.dontPush && this.addEntity(cloth);\r\n    return cloth;\r\n  }\r\n\r\n\r\n  /**\r\n   * @param {number} x \r\n   * @param {number} y \r\n   * @param {number} segments=10\r\n   * @param {number} gap=15\r\n   * @param {number} pin=0\r\n   */\r\n  createRope(x, y, segments = 10, gap = 15, pin) {\r\n    let rope = new Entity(this.iterations, this);\r\n\r\n    for (let i = 0; i < segments; i++) {\r\n      rope.addPoint(x + i * gap, y, 0, 0)\r\n    }\r\n\r\n    for (let i = 0; i < segments - 1; i++) {\r\n      rope.addStick(i, (i + 1) % segments);\r\n    }\r\n\r\n    if (pin !== undefined) {\r\n      rope.pin(pin);\r\n    }\r\n    this.addEntity(rope);\r\n    return rope;\r\n  }\r\n\r\n\r\n  createRagdoll(x0, y0) {\r\n    let ragdoll = new Entity(this.iterations, this);\r\n\r\n    // Head\r\n    // x, y, extremity, gravity, radius\r\n    // let h = ;\r\n    // h.head = true;\r\n    // h.oldx = x0 + (Math.random() - 0.5) * 25;\r\n\r\n    let head = new Point(x0, y0, 0, 0, 15);\r\n    head.setMass(5);\r\n    ragdoll.addPoint(head);\r\n\r\n    // Groin\r\n    ragdoll.addPoint(x0, y0 + 100);\r\n\r\n    // Hips\r\n    ragdoll.addPoint(x0 + 30, y0 + 90);\r\n    ragdoll.addPoint(x0 - 30, y0 + 90);\r\n\r\n    // Knees\r\n    ragdoll.addPoint(x0 + 20, y0 + 150);\r\n    ragdoll.addPoint(x0 - 20, y0 + 150);\r\n\r\n    // Feet\r\n    let f1 = new Point(x0 + 30, y0 + 190, 0, 0, 10);\r\n    let f2 = new Point(x0 - 30, y0 + 190, 0, 0, 10);\r\n    f1.setMass(20);\r\n    f2.setMass(20);\r\n    ragdoll.addPoint(f1);\r\n    ragdoll.addPoint(f2);\r\n\r\n    // Neck\r\n    ragdoll.addPoint(x0, y0 + 25);\r\n\r\n    // Shoulders\r\n    ragdoll.addPoint(x0 + 25, y0 + 30);\r\n    ragdoll.addPoint(x0 - 25, y0 + 30);\r\n\r\n    // Hands\r\n    let h1 = new Point(x0 + 15, y0 + 105, 0, 0, 10);\r\n    let h2 = new Point(x0 - 15, y0 + 105, 0, 0, 10);\r\n    h1.setMass(5);\r\n    h2.setMass(5);\r\n    ragdoll.addPoint(h1);\r\n    ragdoll.addPoint(h2);\r\n\r\n\r\n\r\n    // \"Muscles\"\r\n    // Head - shoulders\r\n    ragdoll.addStick(0, 9);\r\n    ragdoll.addStick(0, 10);\r\n    // Shoulder - shoulder\r\n    ragdoll.addStick(9, 10);\r\n\r\n    // Shoulders - hips\r\n    ragdoll.addStick(9, 2);\r\n    ragdoll.addStick(10, 3);\r\n    // Shoulders - hips opposite side\r\n    ragdoll.addStick(9, 3);\r\n    ragdoll.addStick(10, 2);\r\n\r\n    // Hips - feet\r\n    ragdoll.addStick(2, 6);\r\n    ragdoll.addStick(3, 7);\r\n\r\n    // Hips - feet, opposite\r\n    ragdoll.addStick(2, 7);\r\n    ragdoll.addStick(3, 6);\r\n\r\n    // Head - groin\r\n    ragdoll.addStick(0, 1);\r\n\r\n    // Hip - hip\r\n    ragdoll.addStick(2, 3);\r\n    // Shoulder - hip\r\n    ragdoll.addStick(9, 2);\r\n    ragdoll.addStick(10, 3);\r\n\r\n    // Head - knee\r\n    ragdoll.addStick(0, 4);\r\n    // Head - knee\r\n    ragdoll.addStick(0, 5);\r\n\r\n    // Head feet\r\n    ragdoll.addStick(0, 6);\r\n    ragdoll.addStick(0, 7);\r\n\r\n    // Body parts\r\n    // Hips\r\n    ragdoll.addStick(1, 2);\r\n    ragdoll.addStick(1, 3);\r\n    // Legs\r\n    ragdoll.addStick(2, 4);\r\n    ragdoll.addStick(3, 5);\r\n    ragdoll.addStick(4, 6);\r\n    ragdoll.addStick(5, 7);\r\n\r\n    ragdoll.addStick(0, 8);\r\n    ragdoll.addStick(8, 1);\r\n\r\n    // Left arm\r\n    ragdoll.addStick(8, 9);\r\n    ragdoll.addStick(9, 11);\r\n\r\n    // Right arm\r\n    ragdoll.addStick(8, 10);\r\n    ragdoll.addStick(10, 12);\r\n\r\n    this.addEntity(ragdoll);\r\n    return ragdoll;\r\n  }\r\n}\r\n\r\nexport default Verly;","/**\r\n * @class Vector\r\n * @version v1.0.0\r\n * @author Anurag Hazra\r\n * @param {number} x\r\n * @param {number} y\r\n */\r\nclass Vector {\r\n\r\n  constructor(x, y) {\r\n    this.x = x || 0;\r\n    this.y = y || 0;\r\n  }\r\n\r\n  /**\r\n   * get distance from two vectors\r\n   * @param {Vector} v1 \r\n   * @param {Vector} v2 \r\n   * @return {number}\r\n   */\r\n  static dist(v1, v2) {\r\n    return v1.dist(v2);\r\n  }\r\n  \r\n  /**\r\n   * get distance squared from two vectors \r\n   * @param {Vector} v1 \r\n   * @param {Vector} v2 \r\n   * @return {number}\r\n   */\r\n  static distSq(v1, v2) {\r\n    return v1.distSq(v2);\r\n  }\r\n\r\n  /**\r\n   * subtract two vectors\r\n   * @param {Vector} v1 \r\n   * @param {Vector} v2 \r\n   * @return {Vector}\r\n   */\r\n  static sub(v1, v2) {\r\n    return new Vector(v1.x - v2.x, v1.y - v2.y);\r\n  }\r\n\r\n  /**\r\n   * add two vectors\r\n   * @param {Vector} v1 \r\n   * @param {Vector} v2 \r\n   * @return {Vector}\r\n   */\r\n  static add(v1, v2) {\r\n    return new Vector(v1.x + v2.x, v1.y + v2.y);\r\n  }\r\n\r\n  /**\r\n   * create vector from angle\r\n   * @param {number} angle \r\n   */\r\n  static fromAngle(angle) {\r\n    let v = new Vector(0, 0);\r\n    v.x = Math.cos(angle);\r\n    v.y = Math.sin(angle);\r\n    return v;\r\n  }\r\n\r\n  /**\r\n   * create random2d vector\r\n   * @return {Vector}\r\n   */\r\n  static random2D() {\r\n    return Vector.fromAngle(Math.random() * Math.PI * 180);\r\n  } \r\n  \r\n  /**\r\n   * adds random jitter motion\r\n   * @param {number} a \r\n   * @param {number} b \r\n   * @return {Vector}\r\n   */\r\n  jitter(a, b) {\r\n    var v = new Vector(a, b);\r\n    this.x += normalizedRandom() * v.x;\r\n    this.y += normalizedRandom() * v.y;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * add this vector to another vector\r\n   * @param {Vector|number} x \r\n   * @param {Number} y \r\n   * @return {Vector}\r\n   */\r\n  add(x, y) {\r\n    if (arguments.length === 1) {\r\n      this.x += x.x;\r\n      this.y += x.y;\r\n    } else if (arguments.length === 2) {\r\n      this.x += x;\r\n      this.y += y;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * subtracts this vector to another vector\r\n   * @param {Vector|number} x \r\n   * @param {Number} y \r\n   * @return {Vector}\r\n   */\r\n  sub(x, y) {\r\n    if (arguments.length === 1) {\r\n      this.x -= x.x;\r\n      this.y -= x.y;\r\n    } else if (arguments.length === 2) {\r\n      this.x -= x;\r\n      this.y -= y;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * multiply this vector to a scalar value or a vector\r\n   * @param {Vector|number} v \r\n   * @return {Vector}\r\n   */\r\n  mult(v) {\r\n    if (typeof v === 'number') {\r\n      this.x *= v;\r\n      this.y *= v;\r\n    } else {\r\n      this.x *= v.x;\r\n      this.y *= v.y;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * divide this vector to a scalar value or a vector\r\n   * @param {Vector|number} v \r\n   * @return {Vector}\r\n   */\r\n  div(v) {\r\n    if (typeof v === 'number') {\r\n      this.x /= v;\r\n      this.y /= v;\r\n    } else {\r\n      this.x /= v.x;\r\n      this.y /= v.y;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * set this vectors angle\r\n   * @param {number} angle \r\n   */\r\n  setAngle(angle) {\r\n    var len = this.mag();\r\n    this.x = Math.cos(angle) * len;\r\n    this.y = Math.sin(angle) * len;\r\n  }\r\n\r\n\r\n  /**\r\n   * get the magnitude of this vector\r\n   * @return {number}\r\n   */\r\n  mag() {\r\n    return Math.sqrt(this.x * this.x + this.y * this.y);\r\n  }\r\n\r\n  /**\r\n   * get the magnitude sqr of this vector\r\n   * @return {number}\r\n   */\r\n  magSq() {\r\n    return (this.x * this.x + this.y * this.y);\r\n  }\r\n\r\n  /**\r\n   * set x, y of this vector\r\n   * @param {number} x \r\n   * @param {number} y \r\n   * @return {Vector}\r\n   */\r\n  setXY(x, y) {\r\n    this.x = x;\r\n    this.y = y;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * set the magnitude of this vector\r\n   * @param {number} value \r\n   * @return {Vector}\r\n   */\r\n  setMag(value) {\r\n    this.normalize();\r\n    this.mult(value);\r\n    return this;\r\n  }\r\n  \r\n  /**\r\n   * normalize this vector \r\n   * @return {Vector}\r\n   */\r\n  normalize() {\r\n    let m = this.mag();\r\n    if (m > 0) {\r\n      this.div(m);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * normalize this vector to a specific length\r\n   * @param {number} length \r\n   * @return {Vector}\r\n   */\r\n  normalizeTo(length) {\r\n    var mag = this.mag();\r\n    if (mag > 0) {\r\n      mag = length / mag;\r\n      this.mult(mag);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * limit this vector\r\n   * @param {number} max \r\n   * @return {Vector}\r\n   */\r\n  limit(max) {\r\n    if (this.mag() > max) {\r\n      this.normalize();\r\n      this.mult(max);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * get heading of this vector in radians\r\n   * @return {number}\r\n   */\r\n  heading() {\r\n    return (-Math.atan2(-this.y, this.x));\r\n  }\r\n  \r\n  /**\r\n   * get distance between this and specific vector\r\n   * @param {Vector} v \r\n   * @return {number}\r\n   */\r\n  dist(v) {\r\n    let dx = this.x - v.x;\r\n    let dy = this.y - v.y;\r\n    return Math.sqrt(dx * dx + dy * dy);\r\n  }\r\n\r\n  /**\r\n   * get distance sqr between this and specific vector\r\n   * @param {Vector} v \r\n   * @return {number}\r\n   */\r\n  distSq(v) {\r\n    let dx = this.x - v.x;\r\n    let dy = this.y - v.y;\r\n    return (dx * dx + dy * dy);\r\n  }\r\n\r\n  /**\r\n   * copy this vector\r\n   * @return {Vector}\r\n   */\r\n  copy() {\r\n    return new Vector(this.x, this.y);\r\n  }\r\n  \r\n  /**\r\n   * revert this vector\r\n   * @return {Vector}\r\n   */\r\n  negative() {\r\n    this.x = -this.x;\r\n    this.y = -this.y;\r\n    return this;\r\n  }\r\n  \r\n  /**\r\n   * return an array representation of this vector\r\n   * @return {Array}\r\n   */\r\n  array() {\r\n    return [this.x, this.y];\r\n  }\r\n  \r\n  /**\r\n   * return a string representation of this vector\r\n   * @return {String}\r\n   */\r\n  toString() {\r\n    return \"[\" + this.x + \", \" + this.y + \", \" + this.z + \"]\";\r\n  }\r\n  \r\n  /**\r\n   * \r\n   * @param {Vector} v \r\n   * @return {Vector}\r\n   */\r\n  project(v) {\r\n    var coeff = ((this.x * v.x) + (this.y * v.y)) / ((v.x * v.x) + (v.y * v.y));\r\n    this.x = coeff * v.x;\r\n    this.y = coeff * v.y;\r\n    return this;\r\n  }\r\n  \r\n  /**\r\n   * rotate this vector\r\n   * @param {number} a \r\n   */\r\n  rotate(a) {\r\n    var b = this.heading() + a;\r\n    var c = this.mag();\r\n    this.x = Math.cos(b) * c;\r\n    this.y = Math.sin(b) * c;\r\n  }\r\n}\r\n\r\nexport default Vector;","class Point {\r\n  /**\r\n   * \r\n   * @param {number} x \r\n   * @param {number} y \r\n   * @param {number=} vx \r\n   * @param {number=} vy \r\n   * @param {number=} radius \r\n   */\r\n  constructor(x, y, vx, vy, radius) {\r\n    this.pos = new Vector(x, y);\r\n    this.oldpos = new Vector(x + (vx || 0), y + (vy || 0));\r\n    this.bounce = 0.99;\r\n    this.friction = 0.97;\r\n    this.groundFriction = 0.7;\r\n    this.gravity = new Vector(0, 1);\r\n    this.pinned = false;\r\n    this.radius = radius || 5;\r\n    this.color = '#e62a4f';\r\n    this.mass = 1;\r\n    this.sticks = [];\r\n    // this.behaviors = [];\r\n    this.forceAcc = 1;\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {Vector} g \r\n   */\r\n  setGravity(g) {\r\n    this.gravity = g;\r\n  }\r\n  /**\r\n   * \r\n   * @param {number} f \r\n   */\r\n  setFriction(f) {\r\n    this.friction = f;\r\n  }\r\n  /**\r\n   * \r\n   * @param {number} f \r\n   */\r\n  setForceAcc(f) {\r\n    this.forceAcc = f;\r\n  }\r\n  /**\r\n   * \r\n   * @param {number} m \r\n   */\r\n  setMass(m) {\r\n    this.mass = m;\r\n  }\r\n  /**\r\n   * \r\n   * @param {number} radius \r\n   */\r\n  setRadius(radius) {\r\n    this.radius = radius;\r\n  }\r\n\r\n  \r\n  resetVelocity() {\r\n    this.oldpos.setXY(this.pos.x, this.pos.y);\r\n  }\r\n  pin() {\r\n    this.pinned = true;\r\n  }\r\n  unpin() {\r\n    this.pinned = false;\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {number} angle \r\n   * @param {number} offset \r\n   */\r\n  rotate(angle, offset) {\r\n    let x = offset.x + (this.pos.x - offset.x) * Math.cos(angle) - (this.pos.y - offset.y) * Math.sin(angle);\r\n    let y = offset.y + (this.pos.x - offset.x) * Math.sin(angle) + (this.pos.y - offset.y) * Math.cos(angle);\r\n    this.pos.setXY(x, y);\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {Point} p \r\n   * @param {number} radius \r\n   * @param {number} strength \r\n   */\r\n  resolveBehaviors(p, radius = this.radius, strength = this.forceAcc) {\r\n    var delta = Vector.sub(this.pos, p.pos);\r\n    var dist = delta.magSq();\r\n\r\n    let magR = radius * radius;\r\n    if (dist < magR) {\r\n      var f = delta.normalizeTo(1 - (dist / magR)).mult(strength);\r\n      this.applyForce(f);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {number|Vector} f \r\n   */\r\n  applyForce(f) {\r\n    this.pos.add(f);\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {number} x \r\n   * @param {number} y \r\n   * @param {number} time \r\n   * @param {number} radius \r\n   * @param {number} speed \r\n   */\r\n  addMotor(x, y, time, radius, speed) {\r\n    this.pos.x = x + radius * Math.cos(time * speed);\r\n    this.pos.y = y + radius * Math.sin(time * speed);\r\n  }\r\n\r\n  /**\r\n   * @param {Verly} verlyInstance \r\n   */\r\n  constrain(verlyInstance) {\r\n    // if (this.pos.y > HEIGHT - 1) {\r\n    //   this.pos.y = HEIGHT - 1;\r\n    // }\r\n    // if (this.pos.x < 0) {\r\n    //   this.pos.x = 0;\r\n    // }\r\n    // if (this.pos.x > WIDTH - 1) {\r\n    //   this.pos.x = WIDTH - 1;\r\n    // }\r\n    // let vel = Vector.sub(this.pos, this.oldpos);\r\n    if (this.pos.x > verlyInstance.WIDTH - this.radius) {\r\n      this.pos.x = verlyInstance.WIDTH - this.radius;\r\n      // this.oldpos.x = (this.pos.x + vel.x) * this.bounce;\r\n    }\r\n    if (this.pos.x < this.radius) {\r\n      this.pos.x = this.radius;\r\n      // this.oldpos.x = (this.pos.x + vel.x) * this.bounce;\r\n    }\r\n    if (this.pos.y > verlyInstance.HEIGHT - this.radius) {\r\n      this.pos.y = verlyInstance.HEIGHT - this.radius;\r\n      // this.oldpos.y = (this.pos.y + vel.y) * this.bounce;\r\n    }\r\n    if (this.pos.y < this.radius) {\r\n      this.pos.y = this.radius;\r\n      // this.oldpos.y = (this.pos.y + vel.y) * this.bounce;\r\n    }\r\n  };\r\n\r\n\r\n  /**\r\n   * @param {Verly} verlyInstance \r\n   */\r\n  update(verlyInstance) {\r\n    if (this.pinned) return;\r\n    let vel = Vector.sub(this.pos, this.oldpos);\r\n    vel.mult(this.friction);\r\n    // if the point touches the ground set groundFriction\r\n    if (this.pos.y >= verlyInstance.HEIGHT - this.radius && vel.magSq() > 0.000001) {\r\n      var m = vel.mag();\r\n      vel.x /= m;\r\n      vel.y /= m;\r\n      vel.mult(m * this.groundFriction);\r\n    }\r\n    this.oldpos.setXY(this.pos.x, this.pos.y);\r\n    this.pos.add(vel);\r\n    this.pos.add(this.gravity);\r\n  }\r\n\r\n  /**\r\n   * @param {CanvasRenderingContext2D} ctx \r\n   */\r\n  render(ctx) {\r\n    ctx.beginPath();\r\n    ctx.fillStyle = this.color;\r\n    ctx.arc(this.pos.x, this.pos.y, this.radius, 0, Math.PI * 2);\r\n    ctx.fill();\r\n    ctx.closePath();\r\n  }\r\n}\r\n\r\n\r\nexport default Point;","class Stick {\r\n  /**\r\n   * creates a stick between two Point\r\n   * takes optional length and stiffness \r\n   * @param {Point} p1 \r\n   * @param {Point} p2 \r\n   * @param {number=} length \r\n   * @param {number=} stiffness \r\n   */\r\n  constructor(p1, p2, length, stiffness) {\r\n    this.startPoint = p1;\r\n    this.endPoint = p2;\r\n    this.stiffness = stiffness || 2;\r\n    this.color = '#f5476a';\r\n    if (!length) {\r\n      this.length = this.startPoint.pos.dist(this.endPoint.pos);\r\n    } else {\r\n      this.length = length;\r\n    }\r\n    this.startPoint.sticks.push(this);\r\n    this.endPoint.sticks.push(this);\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {number=} stepCoef \r\n   */\r\n  update(stepCoef) {\r\n    // not gonna use vectors for performance optimization\r\n    // let dx = this.endPoint.pos.x - this.startPoint.pos.x;\r\n    // let dy = this.endPoint.pos.y - this.startPoint.pos.y;\r\n    // let dist = Math.sqrt(dx * dx + dy * dy);\r\n    // let diff = this.length - dist;\r\n    // let percent = diff / dist / 2;\r\n    // let offsetx = (dx * percent);\r\n    // let offsety = (dy * percent);\r\n    // if (!this.startPoint.pinned) {\r\n    //   this.startPoint.pos.x -= offsetx;\r\n    //   this.startPoint.pos.y -= offsety;\r\n    // }\r\n    // if (!this.endPoint.pinned) {\r\n    //   this.endPoint.pos.x += offsetx;\r\n    //   this.endPoint.pos.y += offsety;\r\n    // }\r\n    // ----- algo two\r\n\r\n    // algo three\r\n    let dx = this.endPoint.pos.x - this.startPoint.pos.x;\r\n    let dy = this.endPoint.pos.y - this.startPoint.pos.y;\r\n    let dist = Math.sqrt(dx * dx + dy * dy);\r\n    let diff = (this.length - dist) / dist * this.stiffness;\r\n\r\n    let offsetx = dx * diff * 0.5;\r\n    let offsety = dy * diff * 0.5;\r\n\r\n    // calculate mass\r\n    let m1 = this.startPoint.mass + this.endPoint.mass;\r\n    let m2 = this.startPoint.mass / m1;\r\n    m1 = this.endPoint.mass / m1;\r\n\r\n    if (!this.startPoint.pinned) {\r\n      this.startPoint.pos.x -= offsetx * m1;\r\n      this.startPoint.pos.y -= offsety * m1;\r\n    }\r\n    if (!this.endPoint.pinned) {\r\n      this.endPoint.pos.x += offsetx * m2;\r\n      this.endPoint.pos.y += offsety * m2;\r\n    }\r\n\r\n    \r\n    // calculate mass\r\n    // var m1 = this.startPoint.mass + this.endPoint.mass;\r\n    // var m2 = this.startPoint.mass / m1;\r\n    // m1 = this.endPoint.mass / m1;\r\n    \r\n    // var normal = Vector.sub(this.startPoint.pos, this.endPoint.pos);\r\n    // var m = normal.magSq();\r\n    // let diff = ((this.length * this.length) - m);\r\n    // normal.mult((diff / m) * this.stiffness * stepCoef);\r\n    \r\n    // if (!this.startPoint.pinned) {\r\n    //   this.startPoint.pos.add(normal);\r\n    // }\r\n    // if (!this.endPoint.pinned) {\r\n    //   this.endPoint.pos.sub(normal);\r\n    // }\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {CanvasRenderingContext2D} ctx \r\n   */\r\n  render(ctx) {\r\n    ctx.beginPath();\r\n    ctx.strokeStyle = this.color;\r\n    ctx.moveTo(this.startPoint.pos.x, this.startPoint.pos.y);\r\n    ctx.lineTo(this.endPoint.pos.x, this.endPoint.pos.y);\r\n    ctx.stroke();\r\n    ctx.closePath();\r\n  }\r\n}\r\n\r\nexport default Stick;\r\n","class Entity {\r\n\r\n  /**\r\n   * @param {number} iterations \r\n   * @param {Verly} verlyInstance \r\n   */\r\n  constructor(iterations, verlyInstance) {\r\n    this.points = [];\r\n    this.sticks = [];\r\n    this.verlyInstance = verlyInstance;\r\n    this.iterations = iterations || 16;\r\n  }\r\n\r\n\r\n  // join(...args) {\r\n  //   let points = [];\r\n  //   let sticks = [];\r\n\r\n  //   // loop through the args and push points and sticks to the array\r\n  //   for (let i = 0; i < args.length; i++) {\r\n  //     points.push(args[i].points);\r\n  //     sticks.push(args[i].sticks);\r\n  //   }\r\n\r\n  //   // join multiple arrays\r\n  //   points = [].concat.apply([], points);\r\n  //   sticks = [].concat.apply([], sticks);\r\n\r\n  //   // add the arrays to the mix::Entity\r\n  //   this.points = points;\r\n  //   this.sticks = sticks;\r\n\r\n  //   return this; // return for chaining\r\n  // }\r\n\r\n  /**\r\n   * sets the gravity of this entity\r\n   * @param {Vector} g \r\n   */\r\n  setGravity(g) {\r\n    for (let i = 0; i < this.points.length; i++) {\r\n      this.points[i].setGravity(g);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * sets the friction of this entity\r\n   * @param {number} f \r\n   */\r\n  setFriction(f) {\r\n    for (let i = 0; i < this.points.length; i++) {\r\n      this.points[i].setFriction(f);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * pin a specific Point\r\n   * @param {number} index \r\n   */\r\n  pin(index) {\r\n    this.points[index].pin();\r\n  }\r\n\r\n  /**\r\n   * remove a specific Point\r\n   * @param {Point} p\r\n   */\r\n  removeSticks(p) {\r\n    this.sticks.splice(this.sticks.indexOf(p.sticks[0]), 1);\r\n    p.sticks.splice(0, 1);\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {Number} x \r\n   * @param {Number} y \r\n   */\r\n  setVelocity(x, y) {\r\n    this.points.map(e => {\r\n      e.oldpos.x += x;\r\n      e.oldpos.y += y;\r\n    })\r\n  }\r\n\r\n  /**\r\n   * adds a Point in points array with {x,y,vx,vy,radius}\r\n   * @param {Number|Point} x \r\n   * @param {Number=} y \r\n   * @param {Number=} vx \r\n   * @param {Number=} vy \r\n   * @param {Number=} radius \r\n   * @returns {Point}\r\n   */\r\n  addPoint(x, y, vx, vy, radius) {\r\n    let p\r\n    if (x instanceof Point) {\r\n      p = x;\r\n    } else {\r\n      p = new Point(x, y, vx, vy, radius);\r\n    }\r\n    this.points.push(p);\r\n    return p;\r\n  }\r\n\r\n  /**\r\n   * adds a stick inbetween two points\r\n   * @param {Number|Stick} p1 \r\n   * @param {Number} p2 \r\n   * @param {Number} length \r\n   */\r\n  addStick(p1, p2, length) {\r\n    // let s;\r\n    // return s;\r\n    if (p1 instanceof Stick) {\r\n      this.sticks.push(p1);\r\n    } else {\r\n      this.sticks.push(new Stick(this.points[p1], this.points[p2], length));\r\n    }\r\n  }\r\n\r\n  /**\r\n   */\r\n  updatePoints() {\r\n    for (let i = 0; i < this.points.length; i++) {\r\n      this.points[i].update(this.verlyInstance);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @methdo updateSticks\r\n   * @param {Number=} stepCoef \r\n   */\r\n  updateSticks(stepCoef) {\r\n    for (let i = 0; i < this.sticks.length; i++) {\r\n      this.sticks[i].update(stepCoef);\r\n    }\r\n  }\r\n\r\n  /**\r\n   */\r\n  updateConstraints() {\r\n    for (let i = 0; i < this.points.length; i++) {\r\n      this.points[i].constrain(this.verlyInstance);\r\n    }\r\n  }\r\n\r\n  /**\r\n   */\r\n  update() {\r\n    // var stepCoef = 1 / this.iterations;\r\n    this.updatePoints();\r\n    for (let j = 0; j < this.iterations; ++j) {\r\n      this.updateSticks();\r\n      this.updateConstraints();\r\n    }\r\n  }\r\n\r\n  /**\r\n   */\r\n  renderPoints() {\r\n    for (let i = 0; i < this.points.length; i++) {\r\n      this.points[i].render(this.verlyInstance.ctx);\r\n    }\r\n  }\r\n\r\n  /**\r\n   */\r\n  renderSticks() {\r\n    for (let i = 0; i < this.sticks.length; i++) {\r\n      this.sticks[i].render(this.verlyInstance.ctx);\r\n    }\r\n  }\r\n\r\n  /**\r\n   */\r\n  renderPointIndex() {\r\n    for (let i = 0; i < this.points.length; i++) {\r\n      this.verlyInstance.ctx.beginPath();\r\n      this.verlyInstance.ctx.fillStyle = 'black';\r\n      this.verlyInstance.ctx.fillText(i, this.points[i].pos.x + 5, this.points[i].pos.y - 6);\r\n      this.verlyInstance.ctx.closePath();\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   */\r\n  render() {\r\n    this.renderPoints();\r\n    this.renderSticks();\r\n  }\r\n}\r\n\r\nexport default Entity;","class TypoGraphy {\r\n  /**\r\n   * \r\n   * @param {number} x \r\n   * @param {number} y \r\n   * @param {number} size \r\n   * @param {string} letter \r\n   * @param {Verly} verlyInstance \r\n   */\r\n  constructor(x, y, size, letter, verlyInstance) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.size = size;\r\n    this.stickDistance = this.size;\r\n    this.iterations = 50;\r\n    // A\r\n    this.A = [\r\n      [0, 0, 1, 0, 0],\r\n      [0, 1, 1, 1, 0],\r\n      [0, 1, 0, 1, 0],\r\n      [1, 1, 1, 1, 1],\r\n      [1, 0, 0, 0, 1]\r\n    ]\r\n    // B\r\n    this.B = [\r\n      [1, 1, 1, 0, 0],\r\n      [1, 1, 1, 1, 0],\r\n      [1, 1, 1, 0, 0],\r\n      [1, 1, 1, 1, 0],\r\n      [1, 1, 1, 0, 0]\r\n    ]\r\n\r\n    // C\r\n    this.C = [\r\n      [1, 1, 1, 1, 0],\r\n      [1, 1, 1, 1, 0],\r\n      [1, 1, 0, 0, 0],\r\n      [1, 1, 1, 1, 0],\r\n      [1, 1, 1, 1, 0]\r\n    ]\r\n\r\n    // D\r\n    this.D = [\r\n      [1, 1, 1, 0, 0],\r\n      [1, 1, 1, 1, 0],\r\n      [1, 1, 1, 1, 0],\r\n      [1, 1, 1, 1, 0],\r\n      [1, 1, 1, 0, 0]\r\n    ];\r\n\r\n    // E\r\n    this.E = [\r\n      [0, 1, 1, 1, 0],\r\n      [0, 1, 1, 0, 0],\r\n      [0, 1, 1, 1, 0],\r\n      [0, 1, 1, 0, 0],\r\n      [0, 1, 1, 1, 0]\r\n    ]\r\n\r\n    // S\r\n    this.S = [\r\n      [0, 1, 1, 1, 0],\r\n      [1, 1, 1, 0, 0],\r\n      [1, 1, 1, 1, 0],\r\n      [0, 1, 1, 1, 0],\r\n      [1, 1, 1, 0, 0]\r\n    ]\r\n\r\n    // I \r\n    this.I = [\r\n      [0, 0, 1, 0, 0],\r\n      [0, 1, 1, 1, 0],\r\n      [0, 1, 1, 1, 0],\r\n      [0, 1, 1, 1, 0],\r\n      [0, 1, 1, 1, 0]\r\n    ]\r\n\r\n\r\n    // K\r\n    this.K = [\r\n      [1, 0, 1, 1, 0],\r\n      [1, 1, 1, 0, 0],\r\n      [1, 1, 0, 0, 0],\r\n      [1, 1, 1, 0, 0],\r\n      [1, 0, 1, 1, 0]\r\n    ]\r\n\r\n    // U\r\n    this.U = [\r\n      [1, 1, 0, 1, 1],\r\n      [1, 1, 0, 1, 1],\r\n      [1, 1, 0, 1, 1],\r\n      [1, 1, 1, 1, 1],\r\n      [0, 1, 1, 1, 0]\r\n    ]\r\n\r\n    // N\r\n    this.N = [\r\n      [0, 0, 0, 0, 0, 0],\r\n      [1, 1, 0, 0, 1, 1],\r\n      [1, 1, 1, 0, 1, 1],\r\n      [1, 1, 1, 1, 1, 1],\r\n      [1, 1, 0, 1, 1, 1],\r\n      [1, 1, 0, 0, 1, 1]\r\n    ]\r\n\r\n    // R\r\n    this.R = [\r\n      [1, 1, 1, 0, 0],\r\n      [1, 1, 1, 1, 0],\r\n      [1, 1, 1, 1, 0],\r\n      [1, 1, 1, 0, 0],\r\n      [1, 1, 1, 1, 0]\r\n    ]\r\n\r\n    // G\r\n    this.G = [\r\n      [0, 1, 1, 1, 0],\r\n      [1, 1, 1, 0, 0],\r\n      [1, 1, 0, 1, 1],\r\n      [1, 1, 1, 1, 1],\r\n      [0, 1, 1, 1, 0]\r\n    ]\r\n\r\n    // L\r\n    this.L = [\r\n      [1, 1, 0, 0, 0],\r\n      [1, 1, 0, 0, 0],\r\n      [1, 1, 0, 0, 0],\r\n      [1, 1, 1, 1, 1],\r\n      [1, 1, 1, 1, 1]\r\n    ]\r\n\r\n    // Y\r\n    this.Y = [\r\n      [1, 1, 0, 1, 1],\r\n      [1, 1, 0, 1, 1],\r\n      [0, 1, 1, 1, 0],\r\n      [0, 1, 1, 1, 0],\r\n      [0, 1, 1, 1, 0]\r\n    ]\r\n\r\n    // V\r\n    this.V = [\r\n      [1, 0, 0, 0, 1],\r\n      [1, 1, 0, 1, 1],\r\n      [1, 1, 0, 1, 1],\r\n      [1, 1, 1, 1, 1],\r\n      [0, 1, 1, 1, 0]\r\n    ]\r\n\r\n    //X\r\n    this.X = [\r\n      [1, 1, 1, 1, 1],\r\n      [1, 1, 1, 1, 1],\r\n      [1, 1, 1, 1, 1],\r\n      [1, 1, 1, 1, 1],\r\n      [1, 1, 1, 1, 1]\r\n    ]\r\n\r\n    //P\r\n    this.P = [\r\n      [1, 1, 1, 0, 0],\r\n      [1, 1, 1, 1, 0],\r\n      [1, 1, 1, 1, 0],\r\n      [1, 1, 1, 0, 0],\r\n      [1, 1, 1, 0, 0]\r\n    ]\r\n\r\n    //H\r\n    this.H = [\r\n      [1, 1, 0, 1, 1],\r\n      [1, 1, 0, 1, 1],\r\n      [1, 1, 1, 1, 1],\r\n      [1, 1, 0, 1, 1],\r\n      [1, 1, 0, 1, 1]\r\n    ]\r\n\r\n    //O\r\n    this.O = [\r\n      [0, 1, 1, 1, 0],\r\n      [1, 1, 0, 1, 1],\r\n      [1, 1, 0, 1, 1],\r\n      [1, 1, 0, 1, 1],\r\n      [0, 1, 1, 1, 0]\r\n    ]\r\n\r\n    this.letters = {\r\n      A: this.A,\r\n      B: this.B,\r\n      C: this.C,\r\n      D: this.D,\r\n      E: this.E,\r\n      K: this.K,\r\n      I: this.I,\r\n      S: this.S,\r\n      U: this.U,\r\n      N: this.N,\r\n      R: this.R,\r\n      G: this.G,\r\n      L: this.L,\r\n      Y: this.Y,\r\n      V: this.V,\r\n      X: this.X,\r\n      P: this.P,\r\n      H: this.H,\r\n      O: this.O,\r\n    }\r\n\r\n\r\n    let gridArray = this.letters[letter];\r\n\r\n    this.text = new Entity(this.iterations, verlyInstance);\r\n    // this.text.renderPoints = function() {};\r\n\r\n    for (let x = 0; x < gridArray.length; x++) {\r\n      for (let y = 0; y < gridArray[x].length; y++) {\r\n        if (gridArray[y][x] == 1) {\r\n          let p = new Point(this.x + x * this.size, this.y + y * this.size);\r\n          p.setRadius(2);\r\n          this.text.addPoint(p);\r\n        }\r\n      }\r\n    }\r\n\r\n    // join\r\n    for (let i = 0; i < this.text.points.length; i++) {\r\n      for (let j = 0; j < this.text.points.length; j++) {\r\n        if (this.text.points[i] == this.text.points[j]) break;\r\n        let d = this.text.points[i].pos.dist(this.text.points[j].pos);\r\n\r\n        if (d > 0 && d < this.size + this.stickDistance) {\r\n          this.text.addStick(i, j);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default TypoGraphy;","import Verly from './Verly';\r\nimport Utils from './Utils';\r\nimport Vector from './Vector';\r\nimport Point from './Point';\r\nimport Stick from './Stick';\r\nimport Entity from './Entity';\r\nimport TypoGraphy from './TypoGraphy';\r\n\r\nwindow.Verly = Verly;\r\nwindow.Vector = Vector;\r\nwindow.Point = Point;\r\nwindow.Stick = Stick;\r\nwindow.Entity = Entity;\r\nwindow.TypoGraphy = TypoGraphy;\r\n\r\nexport default Verly;"],"sourceRoot":""}