{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/Mouse.js","webpack:///./src/Verly.js","webpack:///./src/Vector.js","webpack:///./src/Point.js","webpack:///./src/Stick.js","webpack:///./src/AngleStick.js","webpack:///./src/Entity.js","webpack:///./src/TypoGraphy.js","webpack:///./src/app.js","webpack:///./src/Utils.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Mouse","[object Object]","entities","canvas","ctx","this","draggedPoint","down","coord","Vector","offset","offsetCoord","addEventListener","e","setXY","offsetX","pos","x","offsetY","y","sub","resetVelocity","touches","clientX","clientY","pageX","pageY","getNearestPoint","renderDraggedPoint","dragPoint","point","beginPath","strokeStyle","arc","radius","Math","PI","stroke","closePath","k","length","points","dist","src_Verly","iterations","currentFrame","WIDTH","width","HEIGHT","height","mouse","style","scaleFactor","window","devicePixelRatio","parseFloat","backupScale","backup","cloneNode","getContext","drawImage","ceil","setTransform","args","mixEntity","Entity","sticks","push","index","indexOf","splice","concat","apply","addEntity","drag","update","renderPointIndex","render","w","h","box","addPoint","addStick","segments","stride1","stride2","hexagon","stride","theta","cos","sin","center","Stick","posx","posy","pinOffset","cloth","xStride","yStride","px","py","tear","threshold","startPoint","endPoint","removeSticks","pin","dontPush","gap","rope","undefined","x0","y0","ragdoll","setRadius","setMass","Vector_Vector","v1","v2","distSq","angle","v","fromAngle","random","a","b","normalizedRandom","arguments","len","mag","atan2","vLeft","vRight","origin","sqrt","normalize","mult","div","max","dx","dy","z","coeff","heading","src_Vector","src_Point","vx","vy","oldpos","bounce","friction","groundFriction","gravity","pinned","color","mass","forceAcc","g","f","vel","strength","delta","magSq","magR","normalizeTo","applyForce","add","time","speed","verlyInstance","fillStyle","fill","src_Stick","p1","p2","stiffness","hidden","stepCoef","diff","offsetx","offsety","m1","m2","moveTo","lineTo","src_AngleStick","angle2","rotateBy","tmp","lineWidth","src_Entity","setGravity","setFriction","map","Point","ishidden","stick","p3","AngleStick","constrain","updatePoints","j","updateSticks","updateConstraints","fillText","renderPoints","renderSticks","src_TypoGraphy","size","letter","stickDistance","A","B","C","D","E","S","I","K","U","N","R","G","L","Y","V","X","P","H","O","letters","gridArray","text","Verly","TypoGraphy","rand","min","radians","degrees","clamp","lerp","__webpack_exports__"],"mappings":"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","file":"verly.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export default class Mouse {\r\n  constructor(entities, canvas, ctx) {\r\n    this.entities = entities;\r\n    // Drag Interaction\r\n    this.draggedPoint = null;\r\n    this.down = false;\r\n    this.coord = new Vector();\r\n    this.offset = new Vector();\r\n    this.offsetCoord = new Vector();\r\n    this.canvas = canvas;\r\n    this.ctx = ctx;\r\n\r\n    this.canvas.addEventListener('mousedown', (e) => {\r\n      this.down = true;\r\n      if (this.draggedPoint) {\r\n        this.offset.setXY(e.offsetX - this.draggedPoint.pos.x, e.offsetY - this.draggedPoint.pos.y);\r\n        this.offsetCoord = Vector.sub(this.coord, this.offset);\r\n      }\r\n    })\r\n    this.canvas.addEventListener('mouseup', (e) => {\r\n      if (this.draggedPoint) {\r\n        this.draggedPoint.resetVelocity();\r\n      };\r\n      this.down = false;\r\n      this.draggedPoint = null;\r\n    })\r\n\r\n    this.canvas.addEventListener('mousemove', (e) => {\r\n      this.coord.setXY(e.offsetX, e.offsetY);\r\n      this.offsetCoord = Vector.sub(this.coord, this.offset);\r\n    })\r\n\r\n    // TOUCH\r\n    this.canvas.addEventListener('touchstart', (e) => {\r\n      let offset = e.touches[0];\r\n      this.down = true;\r\n      if (this.draggedPoint) {\r\n        this.offset.setXY(offset.clientX - this.draggedPoint.pos.x, offset.clientY - this.draggedPoint.pos.y);\r\n        this.offsetCoord = Vector.sub(this.coord, this.offset);\r\n      }\r\n    })\r\n    this.canvas.addEventListener('touchend', (e) => {\r\n      if (this.draggedPoint) {\r\n        this.draggedPoint.resetVelocity();\r\n      };\r\n      this.down = false;\r\n      this.draggedPoint = null;\r\n    })\r\n    this.canvas.addEventListener('touchmove', (e) => {\r\n      let offset = e.touches[0];\r\n      this.coord.setXY(offset.pageX, offset.pageY);\r\n      this.offsetCoord = Vector.sub(this.coord, this.offset);\r\n    })\r\n  }\r\n\r\n  dragPoint() {\r\n    if (!this.down) return;\r\n    this.draggedPoint.pos.setXY(this.offsetCoord.x, this.offsetCoord.y);\r\n  }\r\n\r\n  drag() {\r\n    if (!this.down) {\r\n      this.draggedPoint = this.getNearestPoint();\r\n    }\r\n    if (this.draggedPoint) {\r\n      this.renderDraggedPoint(this.draggedPoint);\r\n      this.dragPoint();\r\n    }\r\n  }\r\n  \r\n  renderDraggedPoint(point) {\r\n    this.ctx.beginPath();\r\n    this.ctx.strokeStyle = 'black';\r\n    this.ctx.arc(point.pos.x, point.pos.y, point.radius * 1.5, 0, Math.PI * 2);\r\n    this.ctx.stroke();\r\n    this.ctx.closePath();\r\n  }\r\n\r\n\r\n  getNearestPoint() {\r\n    // if (!this.down) return false;\r\n    let d = 20;\r\n    let p = null;\r\n    for (let k = 0; k < this.entities.length; k++) {\r\n      for (let i = 0; i < this.entities[k].points.length; i++) {\r\n        let dist = this.entities[k].points[i].pos.dist(this.coord);\r\n        if (dist < d) {\r\n          p = this.entities[k].points[i];\r\n        }\r\n      }\r\n    }\r\n    return p;\r\n  }\r\n}\r\n","import Mouse from './Mouse';\r\n\r\n/**\r\n * @class Verly\r\n * @version 1.3.0\r\n * @author <hazru.anurag@gmail.com>\r\n */\r\nclass Verly {\r\n  /**\r\n   * \r\n   * @param {Number} iterations \r\n   * @param {HTMLCanvasElement} canvas \r\n   * @param {CanvasRenderingContext2D} ctx \r\n   */\r\n  constructor(iterations, canvas, ctx) {\r\n    this.entities = [];\r\n    this.iterations = iterations;\r\n    this.currentFrame = 0;\r\n    this.canvas = canvas;\r\n    this.WIDTH = canvas.width;\r\n    this.HEIGHT = canvas.height;\r\n    this.ctx = ctx;\r\n    this.mouse = new Mouse(this.entities, this.canvas, this.ctx);\r\n  }\r\n\r\n  /**\r\n   * sets the canvas DPI for better rendering quality\r\n   */\r\n  setDPI() {\r\n    // Set up CSS size.\r\n    this.canvas.style.width = this.canvas.style.width || this.canvas.width + 'px';\r\n    this.canvas.style.height = this.canvas.style.height || this.canvas.height + 'px';\r\n\r\n    // Get size information.\r\n    var scaleFactor = window.devicePixelRatio / 1;\r\n    var width = parseFloat(this.canvas.style.width);\r\n    var height = parseFloat(this.canvas.style.height);\r\n\r\n    // Backup the this.canvas contents.\r\n    var oldScale = this.canvas.width / width;\r\n    var backupScale = scaleFactor / oldScale;\r\n    var backup = this.canvas.cloneNode(false);\r\n    backup.getContext('2d').drawImage(this.canvas, 0, 0);\r\n\r\n    // Resize the this.canvas.\r\n    this.canvas.width = Math.ceil(width * scaleFactor);\r\n    this.canvas.height = Math.ceil(height * scaleFactor);\r\n\r\n    // Redraw the this.canvas image and scale future draws.\r\n    this.ctx.setTransform(backupScale, 0, 0, backupScale, 0, 0);\r\n    this.ctx.drawImage(backup, 0, 0);\r\n    this.ctx.setTransform(scaleFactor, 0, 0, scaleFactor, 0, 0);\r\n  }\r\n\r\n  \r\n  /**\r\n   * @param  {...Entity} args\r\n   * @description Joins two Entity Class Together \r\n   * \r\n   * @example\r\n   * let canvas = document.getElementById('c');\r\n   * let ctx = canvas.getContext('2d');\r\n   * let width = canvas.width = 600;\r\n   * let height = canvas.height = 500;\r\n   * \r\n   * let verly = new Verly(16, canvas, ctx);\r\n   * let box = verly.createBox(100, 100, 100, 100);\r\n   * let rope = verly.createRope(100, 100, 15, 10, 0);\r\n   * \r\n   * // verly.joinEntities(...Entity)\r\n   * let mix = verly.joinEntities(box, rope);\r\n   * mix.addStick(0, 18, 20)\r\n   * \r\n   * function animate() {\r\n   *  ctx.clearRect(0, 0, width, height);\r\n   * \r\n   *  verly.update();\r\n   *  verly.render();\r\n   *  verly.interact();\r\n   *  verly.renderPointIndex();\r\n   * \r\n   *  requestAnimationFrame(animate);\r\n   * }\r\n   * animate();\r\n   * \r\n   */\r\n  joinEntities(...args) {\r\n    let mixEntity = new Entity(this.iterations, this);\r\n\r\n    let points = [];\r\n    let sticks = [];\r\n\r\n    // loop through the args and push points and sticks to the array\r\n    for (let i = 0; i < args.length; i++) {\r\n      points.push(args[i].points);\r\n      sticks.push(args[i].sticks);\r\n\r\n      // get the index which item we should splice in [this.entities]\r\n      let index = this.entities.indexOf(args[i]);\r\n      this.entities.splice(index, 1);\r\n    }\r\n\r\n    // join multiple arrays\r\n    points = [].concat.apply([], points);\r\n    sticks = [].concat.apply([], sticks);\r\n\r\n    // add the arrays to the mix::Entity\r\n    mixEntity.points = points;\r\n    mixEntity.sticks = sticks;\r\n\r\n    // add the mix::Entity to [this.entities]\r\n    this.addEntity(mixEntity);\r\n    return mixEntity; // return for chaining\r\n  }\r\n\r\n  /**\r\n   * @param {Entity} e \r\n   */\r\n  addEntity(e) {\r\n    this.entities.push(e);\r\n  }\r\n\r\n  /**\r\n   * drags points\r\n   */\r\n  interact() {\r\n    this.mouse.drag();\r\n  }\r\n\r\n  /**\r\n   * updates all the physics stuff\r\n   */\r\n  update() {\r\n    for (let i = 0; i < this.entities.length; i++) {\r\n      this.entities[i].update();\r\n    }\r\n\r\n    this.currentFrame++;\r\n  }\r\n\r\n  /**\r\n   */\r\n  renderPointIndex() {\r\n    for (let i = 0; i < this.entities.length; i++) {\r\n      this.entities[i].renderPointIndex(this.ctx);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * renders all the entity\r\n   */\r\n  render() {\r\n    for (let i = 0; i < this.entities.length; i++) {\r\n      this.entities[i].render(this.ctx);\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n  /**\r\n   * @param {number} x \r\n   * @param {number} y \r\n   * @param {number} w \r\n   * @param {number} h \r\n   */\r\n  createBox(x, y, w, h) {\r\n    const box = new Entity(this.iterations, this);\r\n    box.addPoint(x, y, 0, 0);\r\n    box.addPoint(x + w, y, 0, 0);\r\n    box.addPoint(x + w, y + h, 0, 0);\r\n    box.addPoint(x, y + h, 0, 0);\r\n    box.addStick(0, 1);\r\n    box.addStick(1, 2);\r\n    box.addStick(2, 3);\r\n    box.addStick(3, 0);\r\n    box.addStick(3, 1);\r\n\r\n    this.addEntity(box);\r\n    return box;\r\n  }\r\n\r\n\r\n  /**\r\n   * @param {number} x \r\n   * @param {number} y \r\n   * @param {number} segments \r\n   * @param {number} radius=50\r\n   * @param {number} stride1=1\r\n   * @param {number} stride2=5\r\n   */\r\n  createHexagon(x, y, segments, radius = 50, stride1 = 1, stride2 = 5) {\r\n    const hexagon = new Entity(this.iterations, this);\r\n\r\n    let stride = (2 * Math.PI) / segments;\r\n\r\n    // points\r\n    for (let i = 0; i < segments; ++i) {\r\n      let theta = i * stride;\r\n      hexagon.addPoint(\r\n        x + Math.cos(theta) * radius,\r\n        y + Math.sin(theta) * radius,\r\n        0, 0\r\n      );\r\n    }\r\n\r\n    let center = hexagon.addPoint(x, y, 0, 0);\r\n\r\n    // sticks\r\n    for (let i = 0; i < segments; ++i) {\r\n      hexagon.addStick(i, (i + stride1) % segments);\r\n      hexagon.addStick(new Stick(hexagon.points[i], center));\r\n      hexagon.addStick(i, (i + stride2) % segments);\r\n    }\r\n\r\n\r\n    this.addEntity(hexagon);\r\n    return hexagon;\r\n  }\r\n\r\n  /**\r\n   * @param {number} posx \r\n   * @param {number} posy \r\n   * @param {number} w \r\n   * @param {number} h \r\n   * @param {number} segments \r\n   * @param {number} pinOffset \r\n   */\r\n  createCloth(posx, posy, w, h, segments, pinOffset) {\r\n    let cloth = new Entity(this.iterations, this);\r\n\r\n    let xStride = w / segments;\r\n    let yStride = h / segments;\r\n\r\n    let x, y;\r\n    for (y = 0; y < segments; ++y) {\r\n      for (x = 0; x < segments; ++x) {\r\n        let px = posx + x * xStride - w / 2 + xStride / 2;\r\n        let py = posy + y * yStride - h / 2 + yStride / 2;\r\n        cloth.addPoint(px, py);\r\n\r\n        if (x > 0) {\r\n          cloth.addStick(y * segments + x, y * segments + x - 1);\r\n        }\r\n\r\n        if (y > 0) {\r\n          cloth.addStick(y * segments + x, (y - 1) * segments + x);\r\n        }\r\n      }\r\n    }\r\n\r\n    // as the name suggest\r\n    function tear(threshold) {\r\n      for (let i = 0; i < cloth.sticks.length; i++) {\r\n        // find the distance between two points\r\n        let dist = cloth.sticks[i].startPoint.pos.dist(cloth.sticks[i].endPoint.pos)\r\n        if (dist > (threshold || 20)) { // remove if the dist is > than threshold \r\n          cloth.removeSticks(cloth.sticks[i].startPoint);\r\n        }\r\n      }\r\n    }\r\n\r\n    cloth.tear = tear;\r\n\r\n    for (x = 0; x < segments; ++x) {\r\n      if (x % pinOffset == 0) { // magic\r\n        cloth.pin(x);\r\n      }\r\n    }\r\n\r\n    !this.dontPush && this.addEntity(cloth);\r\n    return cloth;\r\n  }\r\n\r\n\r\n  /**\r\n   * @param {number} x \r\n   * @param {number} y \r\n   * @param {number} segments=10\r\n   * @param {number} gap=15\r\n   * @param {number} pin=0\r\n   */\r\n  createRope(x, y, segments = 10, gap = 15, pin) {\r\n    let rope = new Entity(this.iterations, this);\r\n\r\n    for (let i = 0; i < segments; i++) {\r\n      rope.addPoint(x + i * gap, y, 0, 0)\r\n    }\r\n\r\n    for (let i = 0; i < segments - 1; i++) {\r\n      rope.addStick(i, (i + 1) % segments);\r\n    }\r\n\r\n    if (pin !== undefined) {\r\n      rope.pin(pin);\r\n    }\r\n    this.addEntity(rope);\r\n    return rope;\r\n  }\r\n\r\n\r\n  createRagdoll(x0, y0) {\r\n    let ragdoll = new Entity(this.iterations, this);\r\n\r\n    // Head\r\n    ragdoll.addPoint(x0, y0).setRadius(15).setMass(5);\r\n\r\n    // Groin\r\n    ragdoll.addPoint(x0, y0 + 100);\r\n\r\n    // Hips\r\n    ragdoll.addPoint(x0 + 30, y0 + 90);\r\n    ragdoll.addPoint(x0 - 30, y0 + 90);\r\n\r\n    // Knees\r\n    ragdoll.addPoint(x0 + 20, y0 + 150);\r\n    ragdoll.addPoint(x0 - 20, y0 + 150);\r\n\r\n    // Feet\r\n    ragdoll.addPoint(x0 + 30, y0 + 190).setRadius(10).setMass(20);\r\n    ragdoll.addPoint(x0 - 30, y0 + 190).setRadius(10).setMass(20);\r\n\r\n    // Neck\r\n    ragdoll.addPoint(x0, y0 + 25);\r\n\r\n    // Shoulders\r\n    ragdoll.addPoint(x0 + 25, y0 + 30);\r\n    ragdoll.addPoint(x0 - 25, y0 + 30);\r\n\r\n    // Hands\r\n    ragdoll.addPoint(x0 + 15, y0 + 105).setRadius(10).setMass(5);\r\n    ragdoll.addPoint(x0 - 15, y0 + 105).setRadius(10).setMass(5);\r\n\r\n\r\n\r\n    // \"Muscles\"\r\n    // Head - shoulders\r\n    ragdoll.addStick(0, 9);\r\n    ragdoll.addStick(0, 10);\r\n    // Shoulder - shoulder\r\n    ragdoll.addStick(9, 10);\r\n\r\n    // Shoulders - hips\r\n    ragdoll.addStick(9, 2);\r\n    ragdoll.addStick(10, 3);\r\n    // Shoulders - hips opposite side\r\n    ragdoll.addStick(9, 3);\r\n    ragdoll.addStick(10, 2);\r\n\r\n    // Hips - feet\r\n    ragdoll.addStick(2, 6);\r\n    ragdoll.addStick(3, 7);\r\n\r\n    // Hips - feet, opposite\r\n    ragdoll.addStick(2, 7);\r\n    ragdoll.addStick(3, 6);\r\n\r\n    // Head - groin\r\n    ragdoll.addStick(0, 1);\r\n\r\n    // Hip - hip\r\n    ragdoll.addStick(2, 3);\r\n    // Shoulder - hip\r\n    ragdoll.addStick(9, 2);\r\n    ragdoll.addStick(10, 3);\r\n\r\n    // Head - knee\r\n    ragdoll.addStick(0, 4);\r\n    // Head - knee\r\n    ragdoll.addStick(0, 5);\r\n\r\n    // Head feet\r\n    ragdoll.addStick(0, 6);\r\n    ragdoll.addStick(0, 7);\r\n\r\n    // Body parts\r\n    // Hips\r\n    ragdoll.addStick(1, 2);\r\n    ragdoll.addStick(1, 3);\r\n    // Legs\r\n    ragdoll.addStick(2, 4);\r\n    ragdoll.addStick(3, 5);\r\n    ragdoll.addStick(4, 6);\r\n    ragdoll.addStick(5, 7);\r\n\r\n    ragdoll.addStick(0, 8);\r\n    ragdoll.addStick(8, 1);\r\n\r\n    // Left arm\r\n    ragdoll.addStick(8, 9);\r\n    ragdoll.addStick(9, 11);\r\n\r\n    // Right arm\r\n    ragdoll.addStick(8, 10);\r\n    ragdoll.addStick(10, 12);\r\n\r\n    this.addEntity(ragdoll);\r\n    return ragdoll;\r\n  }\r\n}\r\n\r\nexport default Verly;","/**\r\n * @class Vector\r\n * @version v1.0.0\r\n * @author Anurag Hazra\r\n * @param {number} x\r\n * @param {number} y\r\n */\r\nclass Vector {\r\n\r\n  constructor(x, y) {\r\n    this.x = x || 0;\r\n    this.y = y || 0;\r\n  }\r\n\r\n  /**\r\n   * get distance from two vectors\r\n   * @param {Vector} v1 \r\n   * @param {Vector} v2 \r\n   * @return {number}\r\n   */\r\n  static dist(v1, v2) {\r\n    return v1.dist(v2);\r\n  }\r\n\r\n  /**\r\n   * get distance squared from two vectors \r\n   * @param {Vector} v1 \r\n   * @param {Vector} v2 \r\n   * @return {number}\r\n   */\r\n  static distSq(v1, v2) {\r\n    return v1.distSq(v2);\r\n  }\r\n\r\n  /**\r\n   * subtract two vectors\r\n   * @param {Vector} v1 \r\n   * @param {Vector} v2 \r\n   * @return {Vector}\r\n   */\r\n  static sub(v1, v2) {\r\n    return new Vector(v1.x - v2.x, v1.y - v2.y);\r\n  }\r\n\r\n  /**\r\n   * add two vectors\r\n   * @param {Vector} v1 \r\n   * @param {Vector} v2 \r\n   * @return {Vector}\r\n   */\r\n  static add(v1, v2) {\r\n    return new Vector(v1.x + v2.x, v1.y + v2.y);\r\n  }\r\n\r\n  /**\r\n   * create vector from angle\r\n   * @param {number} angle \r\n   */\r\n  static fromAngle(angle) {\r\n    let v = new Vector(0, 0);\r\n    v.x = Math.cos(angle);\r\n    v.y = Math.sin(angle);\r\n    return v;\r\n  }\r\n\r\n  /**\r\n   * create random2d vector\r\n   * @return {Vector}\r\n   */\r\n  static random2D() {\r\n    return Vector.fromAngle(Math.random() * Math.PI * 180);\r\n  }\r\n\r\n  /**\r\n   * adds random jitter motion\r\n   * @param {number} a \r\n   * @param {number} b \r\n   * @return {Vector}\r\n   */\r\n  jitter(a, b) {\r\n    var v = new Vector(a, b);\r\n    this.x += normalizedRandom() * v.x;\r\n    this.y += normalizedRandom() * v.y;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * add this vector to another vector\r\n   * @param {Vector|number} x \r\n   * @param {Number} y \r\n   * @return {Vector}\r\n   */\r\n  add(x, y) {\r\n    if (arguments.length === 1) {\r\n      this.x += x.x;\r\n      this.y += x.y;\r\n    } else if (arguments.length === 2) {\r\n      this.x += x;\r\n      this.y += y;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * subtracts this vector to another vector\r\n   * @param {Vector|number} x \r\n   * @param {Number} y \r\n   * @return {Vector}\r\n   */\r\n  sub(x, y) {\r\n    if (arguments.length === 1) {\r\n      this.x -= x.x;\r\n      this.y -= x.y;\r\n    } else if (arguments.length === 2) {\r\n      this.x -= x;\r\n      this.y -= y;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * multiply this vector to a scalar value or a vector\r\n   * @param {Vector|number} v \r\n   * @return {Vector}\r\n   */\r\n  mult(v) {\r\n    if (typeof v === 'number') {\r\n      this.x *= v;\r\n      this.y *= v;\r\n    } else {\r\n      this.x *= v.x;\r\n      this.y *= v.y;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * divide this vector to a scalar value or a vector\r\n   * @param {Vector|number} v \r\n   * @return {Vector}\r\n   */\r\n  div(v) {\r\n    if (typeof v === 'number') {\r\n      this.x /= v;\r\n      this.y /= v;\r\n    } else {\r\n      this.x /= v.x;\r\n      this.y /= v.y;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * set this vectors angle\r\n   * @param {number} angle \r\n   */\r\n  setAngle(angle) {\r\n    var len = this.mag();\r\n    this.x = Math.cos(angle) * len;\r\n    this.y = Math.sin(angle) * len;\r\n  }\r\n\r\n  /**\r\n   * get the angle thia and given vector\r\n   * @param {Vector} v \r\n   * @returns {number}\r\n   */\r\n  angle(v) {\r\n    return Math.atan2(this.x * v.y - this.y * v.x, this.x * v.x + this.y * v.y);\r\n  }\r\n\r\n  /**\r\n   * @param {Vector} vLeft \r\n   * @param {Vector} vRight\r\n   * @returns {Vector} \r\n   */\r\n  angle2(vLeft, vRight) {\r\n    return Vector.sub(vLeft, this).angle(Vector.sub(vRight, this));\r\n  }\r\n\r\n  /**\r\n   * rotate this vector by some origin and angle\r\n   * @param {Vector} origin \r\n   * @param {theta} theta \r\n   * @returns {Vector}\r\n   */\r\n  rotateBy(origin, theta) {\r\n    var x = this.x - origin.x;\r\n    var y = this.y - origin.y;\r\n    return new Vector(\r\n      x * Math.cos(theta) - y * Math.sin(theta) + origin.x,\r\n      x * Math.sin(theta) + y * Math.cos(theta) + origin.y\r\n    );\r\n  }\r\n\r\n\r\n  /**\r\n   * get the magnitude of this vector\r\n   * @return {number}\r\n   */\r\n  mag() {\r\n    return Math.sqrt(this.x * this.x + this.y * this.y);\r\n  }\r\n\r\n  /**\r\n   * get the magnitude sqr of this vector\r\n   * @return {number}\r\n   */\r\n  magSq() {\r\n    return (this.x * this.x + this.y * this.y);\r\n  }\r\n\r\n  /**\r\n   * set x, y of this vector\r\n   * @param {number} x \r\n   * @param {number} y \r\n   * @return {Vector}\r\n   */\r\n  setXY(x, y) {\r\n    this.x = x;\r\n    this.y = y;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * set the magnitude of this vector\r\n   * @param {number} value \r\n   * @return {Vector}\r\n   */\r\n  setMag(value) {\r\n    this.normalize();\r\n    this.mult(value);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * normalize this vector \r\n   * @return {Vector}\r\n   */\r\n  normalize() {\r\n    let m = this.mag();\r\n    if (m > 0) {\r\n      this.div(m);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * normalize this vector to a specific length\r\n   * @param {number} length \r\n   * @return {Vector}\r\n   */\r\n  normalizeTo(length) {\r\n    var mag = this.mag();\r\n    if (mag > 0) {\r\n      mag = length / mag;\r\n      this.mult(mag);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * limit this vector\r\n   * @param {number} max \r\n   * @return {Vector}\r\n   */\r\n  limit(max) {\r\n    if (this.mag() > max) {\r\n      this.normalize();\r\n      this.mult(max);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * get heading of this vector in radians\r\n   * @return {number}\r\n   */\r\n  heading() {\r\n    return (-Math.atan2(-this.y, this.x));\r\n  }\r\n\r\n  /**\r\n   * get distance between this and specific vector\r\n   * @param {Vector} v \r\n   * @return {number}\r\n   */\r\n  dist(v) {\r\n    let dx = this.x - v.x;\r\n    let dy = this.y - v.y;\r\n    return Math.sqrt(dx * dx + dy * dy);\r\n  }\r\n\r\n  /**\r\n   * get distance sqr between this and specific vector\r\n   * @param {Vector} v \r\n   * @return {number}\r\n   */\r\n  distSq(v) {\r\n    let dx = this.x - v.x;\r\n    let dy = this.y - v.y;\r\n    return (dx * dx + dy * dy);\r\n  }\r\n\r\n  /**\r\n   * copy this vector\r\n   * @return {Vector}\r\n   */\r\n  copy() {\r\n    return new Vector(this.x, this.y);\r\n  }\r\n\r\n  /**\r\n   * revert this vector\r\n   * @return {Vector}\r\n   */\r\n  negative() {\r\n    this.x = -this.x;\r\n    this.y = -this.y;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * return an array representation of this vector\r\n   * @return {Array}\r\n   */\r\n  array() {\r\n    return [this.x, this.y];\r\n  }\r\n\r\n  /**\r\n   * return a string representation of this vector\r\n   * @return {String}\r\n   */\r\n  toString() {\r\n    return \"[\" + this.x + \", \" + this.y + \", \" + this.z + \"]\";\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {Vector} v \r\n   * @return {Vector}\r\n   */\r\n  project(v) {\r\n    var coeff = ((this.x * v.x) + (this.y * v.y)) / ((v.x * v.x) + (v.y * v.y));\r\n    this.x = coeff * v.x;\r\n    this.y = coeff * v.y;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * rotate this vector\r\n   * @param {number} a \r\n   */\r\n  rotate(a) {\r\n    var b = this.heading() + a;\r\n    var c = this.mag();\r\n    this.x = Math.cos(b) * c;\r\n    this.y = Math.sin(b) * c;\r\n  }\r\n}\r\n\r\nexport default Vector;","class Point {\r\n  /**\r\n   * \r\n   * @param {number} x \r\n   * @param {number} y \r\n   * @param {number=} vx \r\n   * @param {number=} vy \r\n   * @param {number=} radius \r\n   */\r\n  constructor(x, y, vx, vy, radius) {\r\n    this.pos = new Vector(x, y);\r\n    this.oldpos = new Vector(x + (vx || 0), y + (vy || 0));\r\n    this.bounce = 0.99;\r\n    this.friction = 0.97;\r\n    this.groundFriction = 0.7;\r\n    this.gravity = new Vector(0, 1);\r\n    this.pinned = false;\r\n    this.radius = radius || 5;\r\n    this.color = '#e62a4f';\r\n    this.mass = 1;\r\n    this.sticks = [];\r\n    // this.behaviors = [];\r\n    this.forceAcc = 1;\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {Vector} g \r\n   */\r\n  setGravity(g) {\r\n    this.gravity = g;\r\n    return this;\r\n  }\r\n  /**\r\n   * \r\n   * @param {number} f \r\n   */\r\n  setFriction(f) {\r\n    this.friction = f;\r\n    return this;\r\n  }\r\n  /**\r\n   * \r\n   * @param {number} f \r\n   */\r\n  setGroundFriction(f) {\r\n    this.groundFriction = f;\r\n    return this;\r\n  }\r\n  /**\r\n   * \r\n   * @param {number} b\r\n   */\r\n  setBounce(b) {\r\n    this.bounce = b;\r\n    return this;\r\n  }\r\n  /**\r\n   * \r\n   * @param {number} f \r\n   * @returns {Point}\r\n   */\r\n  setForceAcc(f) {\r\n    this.forceAcc = f;\r\n    return this;\r\n  }\r\n  /**\r\n   * \r\n   * @param {number} m \r\n   * @returns {Point}\r\n   */\r\n  setMass(m) {\r\n    this.mass = m;\r\n    return this;\r\n  }\r\n  /**\r\n   * \r\n   * @param {number} radius \r\n   * @returns {Point}\r\n   */\r\n  setRadius(radius) {\r\n    this.radius = radius;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @param {string} color \r\n   * @returns {Point}\r\n   */\r\n  setColor(color) {\r\n    this.color = color;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @param {Vector} vel \r\n   * @returns {Point}\r\n   */\r\n  setVelocity(vel) {\r\n    this.oldpos.setXY(vel.x, vel.y);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @returns {Point}\r\n   */\r\n  pin() {\r\n    this.pinned = true;\r\n    return this;\r\n  }\r\n  /**\r\n   * @returns {Point}\r\n   */\r\n  unpin() {\r\n    this.pinned = false;\r\n    return this;\r\n  }\r\n\r\n  resetVelocity() {\r\n    this.oldpos.setXY(this.pos.x, this.pos.y);\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {number} angle \r\n   * @param {number} offset \r\n   */\r\n  rotate(angle, offset) {\r\n    let x = offset.x + (this.pos.x - offset.x) * Math.cos(angle) - (this.pos.y - offset.y) * Math.sin(angle);\r\n    let y = offset.y + (this.pos.x - offset.x) * Math.sin(angle) + (this.pos.y - offset.y) * Math.cos(angle);\r\n    this.pos.setXY(x, y);\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {Point} p \r\n   * @param {number} radius \r\n   * @param {number} strength \r\n   */\r\n  resolveBehaviors(p, radius = this.radius, strength = this.forceAcc) {\r\n    var delta = Vector.sub(this.pos, p.pos);\r\n    var dist = delta.magSq();\r\n\r\n    let magR = radius * radius;\r\n    if (dist < magR) {\r\n      var f = delta.normalizeTo(1 - (dist / magR)).mult(strength);\r\n      this.applyForce(f);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {number|Vector} f \r\n   */\r\n  applyForce(f) {\r\n    this.pos.add(f);\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {number} x \r\n   * @param {number} y \r\n   * @param {number} time \r\n   * @param {number} radius \r\n   * @param {number} speed \r\n   */\r\n  addMotor(x, y, time, radius, speed) {\r\n    this.pos.x = x + radius * Math.cos(time * speed);\r\n    this.pos.y = y + radius * Math.sin(time * speed);\r\n  }\r\n\r\n  /**\r\n   * @param {Verly} verlyInstance \r\n   */\r\n  constrain(verlyInstance) {\r\n    // if (this.pos.y > HEIGHT - 1) {\r\n    //   this.pos.y = HEIGHT - 1;\r\n    // }\r\n    // if (this.pos.x < 0) {\r\n    //   this.pos.x = 0;\r\n    // }\r\n    // if (this.pos.x > WIDTH - 1) {\r\n    //   this.pos.x = WIDTH - 1;\r\n    // }\r\n    // let vel = Vector.sub(this.pos, this.oldpos);\r\n    if (this.pos.x > verlyInstance.WIDTH - this.radius) {\r\n      this.pos.x = verlyInstance.WIDTH - this.radius;\r\n      // this.oldpos.x = (this.pos.x + vel.x) * this.bounce;\r\n    }\r\n    if (this.pos.x < this.radius) {\r\n      this.pos.x = this.radius;\r\n      // this.oldpos.x = (this.pos.x + vel.x) * this.bounce;\r\n    }\r\n    if (this.pos.y > verlyInstance.HEIGHT - this.radius) {\r\n      this.pos.y = verlyInstance.HEIGHT - this.radius;\r\n      // this.oldpos.y = (this.pos.y + vel.y) * this.bounce;\r\n    }\r\n    if (this.pos.y < this.radius) {\r\n      this.pos.y = this.radius;\r\n      // this.oldpos.y = (this.pos.y + vel.y) * this.bounce;\r\n    }\r\n  };\r\n\r\n\r\n  /**\r\n   * @param {Verly} verlyInstance \r\n   */\r\n  update(verlyInstance) {\r\n    if (this.pinned) return;\r\n    let vel = Vector.sub(this.pos, this.oldpos);\r\n    vel.mult(this.friction);\r\n    // if the point touches the ground set groundFriction\r\n    if (this.pos.y >= verlyInstance.HEIGHT - this.radius && vel.magSq() > 0.000001) {\r\n      var m = vel.mag();\r\n      vel.x /= m;\r\n      vel.y /= m;\r\n      vel.mult(m * this.groundFriction);\r\n    }\r\n    this.oldpos.setXY(this.pos.x, this.pos.y);\r\n    this.pos.add(vel);\r\n    this.pos.add(this.gravity);\r\n  }\r\n\r\n  /**\r\n   * @param {CanvasRenderingContext2D} ctx \r\n   */\r\n  render(ctx) {\r\n    ctx.beginPath();\r\n    ctx.fillStyle = this.color;\r\n    ctx.arc(this.pos.x, this.pos.y, this.radius, 0, Math.PI * 2);\r\n    ctx.fill();\r\n    ctx.closePath();\r\n  }\r\n}\r\n\r\n\r\nexport default Point;","class Stick {\r\n  /**\r\n   * creates a stick between two Point\r\n   * takes optional length and stiffness \r\n   * @param {Point} p1 \r\n   * @param {Point} p2 \r\n   * @param {number=} length \r\n   * @param {number=} stiffness \r\n   * @param {boolean=} hidden \r\n   */\r\n  constructor(p1, p2, length, stiffness, hidden) {\r\n    this.startPoint = p1;\r\n    this.endPoint = p2;\r\n    this.stiffness = stiffness || 2;\r\n    this.color = '#f5476a';\r\n    this.hidden = hidden;\r\n    if (!length) {\r\n      this.length = this.startPoint.pos.dist(this.endPoint.pos);\r\n    } else {\r\n      this.length = length;\r\n    }\r\n    this.startPoint.sticks.push(this);\r\n    this.endPoint.sticks.push(this);\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {number=} stepCoef \r\n   */\r\n  update(stepCoef) {\r\n    // not gonna use vectors for performance optimization\r\n    // let dx = this.endPoint.pos.x - this.startPoint.pos.x;\r\n    // let dy = this.endPoint.pos.y - this.startPoint.pos.y;\r\n    // let dist = Math.sqrt(dx * dx + dy * dy);\r\n    // let diff = this.length - dist;\r\n    // let percent = diff / dist / 2;\r\n    // let offsetx = (dx * percent);\r\n    // let offsety = (dy * percent);\r\n    // if (!this.startPoint.pinned) {\r\n    //   this.startPoint.pos.x -= offsetx;\r\n    //   this.startPoint.pos.y -= offsety;\r\n    // }\r\n    // if (!this.endPoint.pinned) {\r\n    //   this.endPoint.pos.x += offsetx;\r\n    //   this.endPoint.pos.y += offsety;\r\n    // }\r\n    // ----- algo two\r\n\r\n    // algo three\r\n    let dx = this.endPoint.pos.x - this.startPoint.pos.x;\r\n    let dy = this.endPoint.pos.y - this.startPoint.pos.y;\r\n    let dist = Math.sqrt(dx * dx + dy * dy);\r\n    let diff = (this.length - dist) / dist * this.stiffness;\r\n\r\n    let offsetx = dx * diff * 0.5;\r\n    let offsety = dy * diff * 0.5;\r\n\r\n    // calculate mass\r\n    let m1 = this.startPoint.mass + this.endPoint.mass;\r\n    let m2 = this.startPoint.mass / m1;\r\n    m1 = this.endPoint.mass / m1;\r\n\r\n    if (!this.startPoint.pinned) {\r\n      this.startPoint.pos.x -= offsetx * m1;\r\n      this.startPoint.pos.y -= offsety * m1;\r\n    }\r\n    if (!this.endPoint.pinned) {\r\n      this.endPoint.pos.x += offsetx * m2;\r\n      this.endPoint.pos.y += offsety * m2;\r\n    }\r\n\r\n    \r\n    // calculate mass\r\n    // var m1 = this.startPoint.mass + this.endPoint.mass;\r\n    // var m2 = this.startPoint.mass / m1;\r\n    // m1 = this.endPoint.mass / m1;\r\n    \r\n    // var normal = Vector.sub(this.startPoint.pos, this.endPoint.pos);\r\n    // var m = normal.magSq();\r\n    // let diff = ((this.length * this.length) - m);\r\n    // normal.mult((diff / m) * this.stiffness * stepCoef);\r\n    \r\n    // if (!this.startPoint.pinned) {\r\n    //   this.startPoint.pos.add(normal);\r\n    // }\r\n    // if (!this.endPoint.pinned) {\r\n    //   this.endPoint.pos.sub(normal);\r\n    // }\r\n  }\r\n\r\n  /**\r\n   * @param {string} color\r\n   * @returns {Stick}\r\n   */\r\n  setColor(color) {\r\n    this.color = color;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @param {number} length\r\n   * @returns {Stick}\r\n   */\r\n  setLength(length) {\r\n    this.length = length;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @param {number} value\r\n   * @returns {Stick}\r\n   */\r\n  setStiffness(value) {\r\n    this.stiffness = value;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @param {boolean} value\r\n   * @returns {Stick}\r\n   */\r\n  setHidden(value) {\r\n    this.hidden = value;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {CanvasRenderingContext2D} ctx \r\n   */\r\n  render(ctx) {\r\n    if (this.hidden) return;\r\n    ctx.beginPath();\r\n    ctx.strokeStyle = this.color;\r\n    ctx.moveTo(this.startPoint.pos.x, this.startPoint.pos.y);\r\n    ctx.lineTo(this.endPoint.pos.x, this.endPoint.pos.y);\r\n    ctx.stroke();\r\n    ctx.closePath();\r\n  }\r\n}\r\n\r\nexport default Stick;\r\n","class AngleStick {\r\n  /**\r\n   * \r\n   * @param {Point} a \r\n   * @param {Point} b \r\n   * @param {Point} c \r\n   * @param {number} stiffness \r\n   */\r\n  constructor(a, b, c, stiffness) {\r\n    this.a = a;\r\n    this.b = b;\r\n    this.c = c;\r\n    this.angle = this.b.pos.angle2(this.a.pos, this.c.pos);\r\n    this.stiffness = stiffness;\r\n  }\r\n  \r\n  /**\r\n   * \r\n   */\r\n  update() {\r\n    var angle = this.b.pos.angle2(this.a.pos, this.c.pos);\r\n    // get the angle difference\r\n    var diff = angle - this.angle;\r\n    if (diff <= -Math.PI)\r\n      diff += 2 * Math.PI;\r\n    else if (diff >= Math.PI)\r\n      diff -= 2 * Math.PI;\r\n    diff *= 0.1 * this.stiffness;\r\n\r\n    this.a.pos = this.a.pos.rotateBy(this.b.pos, diff);\r\n    this.c.pos = this.c.pos.rotateBy(this.b.pos, -diff);\r\n    this.b.pos = this.b.pos.rotateBy(this.a.pos, diff);\r\n    this.b.pos = this.b.pos.rotateBy(this.c.pos, -diff);\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {CanvasRenderingContext2D} ctx \r\n   */\r\n  render(ctx) {\r\n    ctx.beginPath();\r\n    ctx.moveTo(this.a.pos.x, this.a.pos.y);\r\n    ctx.lineTo(this.b.pos.x, this.b.pos.y);\r\n    ctx.lineTo(this.c.pos.x, this.c.pos.y);\r\n    var tmp = ctx.lineWidth;\r\n    ctx.lineWidth = 5;\r\n    ctx.strokeStyle = \"rgba(0, 0, 255, 0.5)\";\r\n    ctx.stroke();\r\n    ctx.lineWidth = tmp;\r\n  }\r\n}\r\n\r\nexport default AngleStick;","class Entity {\r\n\r\n  /**\r\n   * @param {number} iterations \r\n   * @param {Verly} verlyInstance \r\n   */\r\n  constructor(iterations, verlyInstance) {\r\n    this.points = [];\r\n    this.sticks = [];\r\n    this.verlyInstance = verlyInstance;\r\n    this.iterations = iterations || 16;\r\n  }\r\n\r\n\r\n  // join(...args) {\r\n  //   let points = [];\r\n  //   let sticks = [];\r\n\r\n  //   // loop through the args and push points and sticks to the array\r\n  //   for (let i = 0; i < args.length; i++) {\r\n  //     points.push(args[i].points);\r\n  //     sticks.push(args[i].sticks);\r\n  //   }\r\n\r\n  //   // join multiple arrays\r\n  //   points = [].concat.apply([], points);\r\n  //   sticks = [].concat.apply([], sticks);\r\n\r\n  //   // add the arrays to the mix::Entity\r\n  //   this.points = points;\r\n  //   this.sticks = sticks;\r\n\r\n  //   return this; // return for chaining\r\n  // }\r\n\r\n  /**\r\n   * sets the gravity of this entity\r\n   * @param {Vector} g \r\n   */\r\n  setGravity(g) {\r\n    for (let i = 0; i < this.points.length; i++) {\r\n      this.points[i].setGravity(g);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * sets the friction of this entity\r\n   * @param {number} f \r\n   */\r\n  setFriction(f) {\r\n    for (let i = 0; i < this.points.length; i++) {\r\n      this.points[i].setFriction(f);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * pin a specific Point\r\n   * @param {number} index \r\n   */\r\n  pin(index) {\r\n    this.points[index].pin();\r\n  }\r\n\r\n  /**\r\n   * remove a specific Point\r\n   * @param {Point} p\r\n   */\r\n  removeSticks(p) {\r\n    this.sticks.splice(this.sticks.indexOf(p.sticks[0]), 1);\r\n    p.sticks.splice(0, 1);\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {Number} x \r\n   * @param {Number} y \r\n   */\r\n  setVelocity(x, y) {\r\n    this.points.map(e => {\r\n      e.oldpos.x += x;\r\n      e.oldpos.y += y;\r\n    })\r\n  }\r\n\r\n  /**\r\n   * adds a Point in points array with {x,y,vx,vy,radius}\r\n   * @param {Number|Point} x \r\n   * @param {Number=} y \r\n   * @param {Number=} vx \r\n   * @param {Number=} vy \r\n   * @param {Number=} radius \r\n   * @returns {Point}\r\n   */\r\n  addPoint(x, y, vx, vy, radius) {\r\n    let p\r\n    if (x instanceof Point) {\r\n      p = x;\r\n    } else {\r\n      p = new Point(x, y, vx, vy, radius);\r\n    }\r\n    this.points.push(p);\r\n    return p;\r\n  }\r\n\r\n  /**\r\n   * adds a stick inbetween two points\r\n   * @param {number|Point} p1 \r\n   * @param {number|Point=} p2 \r\n   * @param {number=} length \r\n   * @param {number=} stiffness \r\n   * @param {boolean=} ishidden \r\n   */\r\n  addStick(p1, p2, length, stiffness, ishidden) {\r\n    let stick;\r\n    if (p1 instanceof Stick) {\r\n      stick = p1;\r\n    } else {\r\n      stick = new Stick(this.points[p1], this.points[p2], length, stiffness, ishidden);\r\n    }\r\n    this.sticks.push(stick);\r\n    return stick;\r\n  }\r\n\r\n  /**\r\n   * adds a AngleStick in between 3 points\r\n   * @param {Point} p1\r\n   * @param {Point} p2\r\n   * @param {Point} p3\r\n   * @param {number} stiffness\r\n   * @returns {AngleStick}\r\n   */\r\n  addAngleStick(p1, p2, p3, stiffness) {\r\n    let stick;\r\n    if (p1 instanceof AngleStick) {\r\n      stick = p1;\r\n    } else {\r\n      stick = new AngleStick(this.points[p1], this.points[p2], this.points[p3], stiffness);\r\n    }\r\n    this.sticks.push(stick);\r\n    return stick;\r\n  }\r\n\r\n  /**\r\n   * \r\n   */\r\n  updatePoints() {\r\n    for (let i = 0; i < this.points.length; i++) {\r\n      this.points[i].update(this.verlyInstance);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @methdo updateSticks\r\n   * @param {Number=} stepCoef \r\n   */\r\n  updateSticks(stepCoef) {\r\n    for (let i = 0; i < this.sticks.length; i++) {\r\n      this.sticks[i].update(stepCoef);\r\n    }\r\n  }\r\n\r\n  /**\r\n   */\r\n  updateConstraints() {\r\n    for (let i = 0; i < this.points.length; i++) {\r\n      this.points[i].constrain(this.verlyInstance);\r\n    }\r\n  }\r\n\r\n  /**\r\n   */\r\n  update() {\r\n    // var stepCoef = 1 / this.iterations;\r\n    this.updatePoints();\r\n    for (let j = 0; j < this.iterations; ++j) {\r\n      this.updateSticks();\r\n      this.updateConstraints();\r\n    }\r\n  }\r\n\r\n  /**\r\n   */\r\n  renderPoints() {\r\n    for (let i = 0; i < this.points.length; i++) {\r\n      this.points[i].render(this.verlyInstance.ctx);\r\n    }\r\n  }\r\n\r\n  /**\r\n   */\r\n  renderSticks() {\r\n    for (let i = 0; i < this.sticks.length; i++) {\r\n      this.sticks[i].render(this.verlyInstance.ctx);\r\n    }\r\n  }\r\n\r\n  /**\r\n   */\r\n  renderPointIndex() {\r\n    for (let i = 0; i < this.points.length; i++) {\r\n      this.verlyInstance.ctx.beginPath();\r\n      this.verlyInstance.ctx.fillStyle = 'black';\r\n      this.verlyInstance.ctx.fillText(i, this.points[i].pos.x + 5, this.points[i].pos.y - 6);\r\n      this.verlyInstance.ctx.closePath();\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   */\r\n  render() {\r\n    this.renderPoints();\r\n    this.renderSticks();\r\n  }\r\n}\r\n\r\nexport default Entity;","class TypoGraphy {\r\n  /**\r\n   * \r\n   * @param {number} x \r\n   * @param {number} y \r\n   * @param {number} size \r\n   * @param {string} letter \r\n   * @param {Verly} verlyInstance \r\n   */\r\n  constructor(x, y, size, letter, verlyInstance) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.size = size;\r\n    this.stickDistance = this.size;\r\n    this.iterations = 50;\r\n    // A\r\n    this.A = [\r\n      [0, 0, 1, 0, 0],\r\n      [0, 1, 1, 1, 0],\r\n      [0, 1, 0, 1, 0],\r\n      [1, 1, 1, 1, 1],\r\n      [1, 0, 0, 0, 1]\r\n    ]\r\n    // B\r\n    this.B = [\r\n      [1, 1, 1, 0, 0],\r\n      [1, 1, 1, 1, 0],\r\n      [1, 1, 1, 0, 0],\r\n      [1, 1, 1, 1, 0],\r\n      [1, 1, 1, 0, 0]\r\n    ]\r\n\r\n    // C\r\n    this.C = [\r\n      [1, 1, 1, 1, 0],\r\n      [1, 1, 1, 1, 0],\r\n      [1, 1, 0, 0, 0],\r\n      [1, 1, 1, 1, 0],\r\n      [1, 1, 1, 1, 0]\r\n    ]\r\n\r\n    // D\r\n    this.D = [\r\n      [1, 1, 1, 0, 0],\r\n      [1, 1, 1, 1, 0],\r\n      [1, 1, 1, 1, 0],\r\n      [1, 1, 1, 1, 0],\r\n      [1, 1, 1, 0, 0]\r\n    ];\r\n\r\n    // E\r\n    this.E = [\r\n      [0, 1, 1, 1, 0],\r\n      [0, 1, 1, 0, 0],\r\n      [0, 1, 1, 1, 0],\r\n      [0, 1, 1, 0, 0],\r\n      [0, 1, 1, 1, 0]\r\n    ]\r\n\r\n    // S\r\n    this.S = [\r\n      [0, 1, 1, 1, 0],\r\n      [1, 1, 1, 0, 0],\r\n      [1, 1, 1, 1, 0],\r\n      [0, 1, 1, 1, 0],\r\n      [1, 1, 1, 0, 0]\r\n    ]\r\n\r\n    // I \r\n    this.I = [\r\n      [0, 0, 1, 0, 0],\r\n      [0, 1, 1, 1, 0],\r\n      [0, 1, 1, 1, 0],\r\n      [0, 1, 1, 1, 0],\r\n      [0, 1, 1, 1, 0]\r\n    ]\r\n\r\n\r\n    // K\r\n    this.K = [\r\n      [1, 0, 1, 1, 0],\r\n      [1, 1, 1, 0, 0],\r\n      [1, 1, 0, 0, 0],\r\n      [1, 1, 1, 0, 0],\r\n      [1, 0, 1, 1, 0]\r\n    ]\r\n\r\n    // U\r\n    this.U = [\r\n      [1, 1, 0, 1, 1],\r\n      [1, 1, 0, 1, 1],\r\n      [1, 1, 0, 1, 1],\r\n      [1, 1, 1, 1, 1],\r\n      [0, 1, 1, 1, 0]\r\n    ]\r\n\r\n    // N\r\n    this.N = [\r\n      [0, 0, 0, 0, 0, 0],\r\n      [1, 1, 0, 0, 1, 1],\r\n      [1, 1, 1, 0, 1, 1],\r\n      [1, 1, 1, 1, 1, 1],\r\n      [1, 1, 0, 1, 1, 1],\r\n      [1, 1, 0, 0, 1, 1]\r\n    ]\r\n\r\n    // R\r\n    this.R = [\r\n      [1, 1, 1, 0, 0],\r\n      [1, 1, 1, 1, 0],\r\n      [1, 1, 1, 1, 0],\r\n      [1, 1, 1, 0, 0],\r\n      [1, 1, 1, 1, 0]\r\n    ]\r\n\r\n    // G\r\n    this.G = [\r\n      [0, 1, 1, 1, 0],\r\n      [1, 1, 1, 0, 0],\r\n      [1, 1, 0, 1, 1],\r\n      [1, 1, 1, 1, 1],\r\n      [0, 1, 1, 1, 0]\r\n    ]\r\n\r\n    // L\r\n    this.L = [\r\n      [1, 1, 0, 0, 0],\r\n      [1, 1, 0, 0, 0],\r\n      [1, 1, 0, 0, 0],\r\n      [1, 1, 1, 1, 1],\r\n      [1, 1, 1, 1, 1]\r\n    ]\r\n\r\n    // Y\r\n    this.Y = [\r\n      [1, 1, 0, 1, 1],\r\n      [1, 1, 0, 1, 1],\r\n      [0, 1, 1, 1, 0],\r\n      [0, 1, 1, 1, 0],\r\n      [0, 1, 1, 1, 0]\r\n    ]\r\n\r\n    // V\r\n    this.V = [\r\n      [1, 0, 0, 0, 1],\r\n      [1, 1, 0, 1, 1],\r\n      [1, 1, 0, 1, 1],\r\n      [1, 1, 1, 1, 1],\r\n      [0, 1, 1, 1, 0]\r\n    ]\r\n\r\n    //X\r\n    this.X = [\r\n      [1, 1, 1, 1, 1],\r\n      [1, 1, 1, 1, 1],\r\n      [1, 1, 1, 1, 1],\r\n      [1, 1, 1, 1, 1],\r\n      [1, 1, 1, 1, 1]\r\n    ]\r\n\r\n    //P\r\n    this.P = [\r\n      [1, 1, 1, 0, 0],\r\n      [1, 1, 1, 1, 0],\r\n      [1, 1, 1, 1, 0],\r\n      [1, 1, 1, 0, 0],\r\n      [1, 1, 1, 0, 0]\r\n    ]\r\n\r\n    //H\r\n    this.H = [\r\n      [1, 1, 0, 1, 1],\r\n      [1, 1, 0, 1, 1],\r\n      [1, 1, 1, 1, 1],\r\n      [1, 1, 0, 1, 1],\r\n      [1, 1, 0, 1, 1]\r\n    ]\r\n\r\n    //O\r\n    this.O = [\r\n      [0, 1, 1, 1, 0],\r\n      [1, 1, 0, 1, 1],\r\n      [1, 1, 0, 1, 1],\r\n      [1, 1, 0, 1, 1],\r\n      [0, 1, 1, 1, 0]\r\n    ]\r\n\r\n    this.letters = {\r\n      A: this.A,\r\n      B: this.B,\r\n      C: this.C,\r\n      D: this.D,\r\n      E: this.E,\r\n      K: this.K,\r\n      I: this.I,\r\n      S: this.S,\r\n      U: this.U,\r\n      N: this.N,\r\n      R: this.R,\r\n      G: this.G,\r\n      L: this.L,\r\n      Y: this.Y,\r\n      V: this.V,\r\n      X: this.X,\r\n      P: this.P,\r\n      H: this.H,\r\n      O: this.O,\r\n    }\r\n\r\n\r\n    let gridArray = this.letters[letter];\r\n\r\n    this.text = new Entity(this.iterations, verlyInstance);\r\n    // this.text.renderPoints = function() {};\r\n\r\n    for (let x = 0; x < gridArray.length; x++) {\r\n      for (let y = 0; y < gridArray[x].length; y++) {\r\n        if (gridArray[y][x] == 1) {\r\n          let p = new Point(this.x + x * this.size, this.y + y * this.size);\r\n          p.setRadius(2);\r\n          this.text.addPoint(p);\r\n        }\r\n      }\r\n    }\r\n\r\n    // join\r\n    for (let i = 0; i < this.text.points.length; i++) {\r\n      for (let j = 0; j < this.text.points.length; j++) {\r\n        if (this.text.points[i] == this.text.points[j]) break;\r\n        let d = this.text.points[i].pos.dist(this.text.points[j].pos);\r\n\r\n        if (d > 0 && d < this.size + this.stickDistance) {\r\n          this.text.addStick(i, j);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default TypoGraphy;","import {\r\n  random,\r\n  radians,\r\n  degrees,\r\n  clamp,\r\n  normalizedRandom,\r\n  lerp\r\n} from './Utils';\r\n\r\nimport Verly from './Verly';\r\nimport Vector from './Vector';\r\nimport Point from './Point';\r\nimport Stick from './Stick';\r\nimport AngleStick from './AngleStick';\r\nimport Entity from './Entity';\r\nimport TypoGraphy from './TypoGraphy';\r\n\r\nwindow.Verly = Verly;\r\nwindow.Vector = Vector;\r\nwindow.Point = Point;\r\nwindow.Stick = Stick;\r\nwindow.AngleStick = AngleStick;\r\nwindow.Entity = Entity;\r\nwindow.TypoGraphy = TypoGraphy;\r\n\r\n// utils\r\nwindow.random = random;\r\nwindow.radians = radians;\r\nwindow.degrees = degrees;\r\nwindow.clamp = clamp;\r\nwindow.normalizedRandom = normalizedRandom;\r\nwindow.lerp = lerp;\r\n\r\nexport default Verly;","/**\r\n * @method normalizedRandom\r\n */\r\nexport const normalizedRandom = function () {\r\n  return Math.random() * 2 - 1;\r\n};\r\n\r\n/**\r\n * @method clamp\r\n * @param {number} value\r\n * @param {number} min\r\n * @param {number} max\r\n */\r\nexport const clamp = function (value, min, max) {\r\n  return Math.max(min, Math.min(value, max));\r\n}\r\n/**\r\n * @method random\r\n */\r\nexport const random = function (rand, min, max) {\r\n  //one param\r\n  if (arguments.length === 1) {\r\n    return Math.random() * arguments[0];\r\n  } else if (arguments.length == 2) {\r\n    //min and max\r\n    max = min;\r\n    min = rand;\r\n    rand = Math.random;\r\n  }\r\n  if (!min && !max) {\r\n    return Math.random();\r\n  } else if (!max) {\r\n    //if only one is provided, then thats actually the max\r\n    max = min;\r\n    return rand() * max;\r\n  }\r\n  return rand() * (max - min) + min;\r\n};\r\n/**\r\n * @method lerp\r\n * @param {number} a\r\n * @param {number} b\r\n * @param {number} p\r\n */\r\nexport const lerp = function (a, b, p) {\r\n  return (b - a) * p + a;\r\n}\r\n\r\n/**\r\n * Convert from degrees to radians.\r\n * @method radians\r\n * @param {number} degrees\r\n */\r\nexport const radians = function(degrees) {\r\n  return degrees * Math.PI / 180;\r\n}\r\n\r\n/**\r\n * Convert from radians to degrees.\r\n * @method degrees\r\n * @param {number} radians\r\n */\r\nexport const degrees = function(radians) {\r\n\treturn radians * 180 / Math.PI;\r\n}"],"sourceRoot":""}